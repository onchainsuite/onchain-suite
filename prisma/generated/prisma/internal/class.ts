/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client";
import type * as Prisma from "./prismaNamespace";

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client",
    },
    output: {
      value:
        "/Users/mujeebahmad/Documents/OnchainSuite/onchain-suite/prisma/generated/prisma",
      fromEnvVar: null,
    },
    config: {
      engineType: "client",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "darwin-arm64",
        native: true,
      },
      {
        fromEnvVar: null,
        value: "rhel-openssl-3.0.x",
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      "/Users/mujeebahmad/Documents/OnchainSuite/onchain-suite/prisma/schema.prisma",
    isCustomOutput: true,
  },
  relativePath: "../..",
  clientVersion: "6.18.0",
  engineVersion: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    '// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider      = "prisma-client"\n  output        = "./generated/prisma"\n  binaryTargets = ["native", "rhel-openssl-3.0.x"]\n  engineType    = "client"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id                      String   @id @default(cuid())\n  email                   String   @unique\n  name                    String?\n  firstName               String?  @map("first_name")\n  lastName                String?  @map("last_name")\n  companyName             String?  @map("company_name")\n  image                   String?\n  role                    UserRole @default(USER)\n  phone                   String?\n  isNewUser               Boolean  @default(true)\n  timezone                String   @default("UTC")\n  emailVerified           Boolean  @default(false) @map("email_verified")\n  onboardingCompleted     Boolean  @default(false) @map("onboarding_completed")\n  notificationPreferences Json     @default("{}") @map("notification_preferences") @db.JsonB\n  preferences             Json     @default("{}") @db.JsonB\n  lastActiveAt            DateTime @default(now()) @map("last_active_at")\n  createdAt               DateTime @default(now()) @map("created_at")\n  updatedAt               DateTime @updatedAt @map("updated_at")\n\n  // Relations\n  sessions              Session[]\n  accounts              Account[]\n  organizationMembers   OrganizationMember[]\n  projectMembers        ProjectMember[]\n  onboardingProgress    OnboardingProgress?\n  campaigns             Campaign[]\n  automationFlows       AutomationFlow[]\n  emailTemplates        EmailTemplate[]\n  integrations          Integration[]\n  notifications         Notification[]\n  analyticsEvents       AnalyticsEvent[]\n  invitedOrgMembers     OrganizationMember[] @relation("InvitedBy")\n  invitedProjectMembers ProjectMember[]      @relation("InvitedBy")\n\n  @@map("users")\n}\n\nmodel Session {\n  id             String   @id @default(cuid())\n  token          String   @unique\n  projectId      String?  @map("project_id")\n  expiresAt      DateTime @map("expires_at")\n  userId         String   @map("user_id")\n  ipAddress      String?  @map("ip_address")\n  userAgent      String?  @map("user_agent")\n  createdAt      DateTime @default(now()) @map("created_at")\n  updatedAt      DateTime @updatedAt @map("updated_at")\n  lastActivityAt DateTime @default(now()) @map("last_activity_at")\n\n  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("sessions")\n}\n\nmodel Account {\n  id                    String    @id @default(cuid())\n  accountId             String    @map("account_id")\n  providerId            String    @map("provider_id")\n  userId                String    @map("user_id")\n  accessToken           String?   @map("access_token")\n  refreshToken          String?   @map("refresh_token")\n  idToken               String?   @map("id_token")\n  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")\n  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now()) @map("created_at")\n  updatedAt             DateTime  @updatedAt @map("updated_at")\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([providerId, accountId])\n  @@map("accounts")\n}\n\nmodel Verification {\n  id         String    @id @default(cuid())\n  identifier String\n  value      String\n  expiresAt  DateTime  @map("expires_at")\n  createdAt  DateTime  @default(now()) @map("created_at")\n  updatedAt  DateTime? @updatedAt @map("updated_at")\n\n  @@unique([identifier, value])\n  @@map("verifications")\n}\n\nmodel Organization {\n  id                  String               @id @default(cuid())\n  name                String\n  slug                String               @unique\n  description         String?\n  logoUrl             String?              @map("logo_url")\n  settings            Json                 @default("{}")\n  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  organizationMembers OrganizationMember[]\n  projects            Project[]\n\n  @@map("organizations")\n}\n\nmodel OrganizationMember {\n  id             String    @id @default(cuid())\n  organizationId String    @map("organization_id")\n  userId         String    @map("user_id")\n  role           String    @default("member")\n  permissions    Json      @default("{}") @db.JsonB\n  invitedBy      String?   @map("invited_by")\n  invitedAt      DateTime? @map("invited_at")\n  joinedAt       DateTime  @default(now()) @map("joined_at")\n  isActive       Boolean   @default(true) @map("is_active")\n  createdAt      DateTime  @default(now()) @map("created_at")\n  updatedAt      DateTime  @updatedAt @map("updated_at")\n\n  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  inviter      User?        @relation("InvitedBy", fields: [invitedBy], references: [id])\n\n  @@unique([organizationId, userId])\n  @@map("organization_members")\n}\n\nmodel Project {\n  id              String           @id @default(cuid())\n  organizationId  String?          @map("organization_id")\n  name            String\n  description     String?\n  slug            String\n  settings        Json             @default("{}")\n  isActive        Boolean          @default(true) @map("is_active")\n  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  automationFlows AutomationFlow[]\n  emailTemplates  EmailTemplate[]\n  integrations    Integration[]\n  notifications   Notification[]\n  analyticsEvents AnalyticsEvent[]\n  sessions        Session[]\n  organization    Organization?    @relation(fields: [organizationId], references: [id])\n  projectMembers  ProjectMember[]\n  campaigns       Campaign[]\n  subscribers     Subscriber[]\n\n  @@unique([organizationId, slug])\n  @@map("projects")\n}\n\nmodel ProjectMember {\n  id          String    @id @default(cuid())\n  projectId   String    @map("project_id")\n  userId      String    @map("user_id")\n  role        String    @default("member")\n  permissions Json      @default("{}")\n  invitedBy   String?   @map("invited_by")\n  invitedAt   DateTime? @map("invited_at") @db.Timestamptz(6)\n  joinedAt    DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)\n  isActive    Boolean   @default(true) @map("is_active")\n  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  inviter     User?     @relation("InvitedBy", fields: [invitedBy], references: [id])\n  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([projectId, userId])\n  @@map("project_members")\n}\n\nmodel OnboardingProgress {\n  id                   String              @id @default(cuid())\n  userId               String              @unique @map("user_id")\n  currentStep          String              @default("welcome") @map("current_step")\n  completedSteps       String[]            @default([]) @map("completed_steps")\n  totalSteps           Int                 @default(5) @map("total_steps")\n  completionPercentage Decimal             @default(0.00) @map("completion_percentage") @db.Decimal(5, 2)\n  isCompleted          Boolean             @default(false) @map("is_completed")\n  startedAt            DateTime            @default(now()) @map("started_at") @db.Timestamptz(6)\n  completedAt          DateTime?           @map("completed_at") @db.Timestamptz(6)\n  lastActivityAt       DateTime            @default(now()) @map("last_activity_at") @db.Timestamptz(6)\n  stepData             Json                @default("{}") @map("step_data")\n  timeSpentSeconds     Int                 @default(0) @map("time_spent_seconds")\n  sessionCount         Int                 @default(1) @map("session_count")\n  abandonedAt          DateTime?           @map("abandoned_at") @db.Timestamptz(6)\n  createdAt            DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  onboardingStepLogs   OnboardingStepLog[]\n\n  @@map("onboarding_progress")\n}\n\nmodel OnboardingStepLog {\n  id               String   @id @default(cuid())\n  onboardingId     String   @map("onboarding_id")\n  stepName         String   @map("step_name")\n  action           String\n  timeSpentSeconds Int      @default(0) @map("time_spent_seconds")\n  stepData         Json     @default("{}") @map("step_data") @db.JsonB\n  userAgent        String?  @map("user_agent")\n  ipAddress        String?  @map("ip_address")\n  createdAt        DateTime @default(now()) @map("created_at")\n\n  onboarding OnboardingProgress @relation(fields: [onboardingId], references: [id], onDelete: Cascade)\n\n  @@map("onboarding_step_logs")\n}\n\nmodel Campaign {\n  id                String    @id @default(cuid())\n  projectId         String    @map("project_id")\n  userId            String    @map("user_id")\n  name              String\n  description       String?\n  type              String    @default("email")\n  status            String    @default("draft")\n  settings          Json      @default("{}") @db.JsonB\n  content           Json      @default("{}") @db.JsonB\n  totalSubscribers  Int       @default(0) @map("total_subscribers")\n  activeSubscribers Int       @default(0) @map("active_subscribers")\n  conversionRate    Decimal   @default(0.00) @map("conversion_rate") @db.Decimal(5, 2)\n  scheduledAt       DateTime? @map("scheduled_at")\n  launchedAt        DateTime? @map("launched_at")\n  completedAt       DateTime? @map("completed_at")\n  createdAt         DateTime  @default(now()) @map("created_at")\n  updatedAt         DateTime  @updatedAt @map("updated_at")\n\n  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  subscribers     Subscriber[]\n  analyticsEvents AnalyticsEvent[]\n\n  @@map("campaigns")\n}\n\nmodel Subscriber {\n  id              String           @id @default(cuid())\n  projectId       String           @map("project_id")\n  campaignId      String?          @map("campaign_id")\n  email           String\n  firstName       String?          @map("first_name")\n  lastName        String?          @map("last_name")\n  phone           String?\n  status          String           @default("active")\n  tags            String[]         @default([])\n  customFields    Json             @default("{}") @map("custom_fields")\n  source          String?\n  optedInAt       DateTime         @default(now()) @map("opted_in_at") @db.Timestamptz(6)\n  unsubscribedAt  DateTime?        @map("unsubscribed_at") @db.Timestamptz(6)\n  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  analyticsEvents AnalyticsEvent[]\n  campaign        Campaign?        @relation(fields: [campaignId], references: [id], onDelete: Cascade)\n  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)\n\n  @@unique([projectId, email])\n  @@map("subscribers")\n}\n\nmodel AutomationFlow {\n  id              String           @id @default(cuid())\n  projectId       String           @map("project_id")\n  userId          String           @map("user_id")\n  name            String\n  description     String?\n  triggerType     String           @map("trigger_type")\n  triggerConfig   Json             @default("{}") @map("trigger_config")\n  actions         Json             @default("{}")\n  conditions      Json             @default("{}")\n  status          String           @default("draft")\n  totalTriggered  Int              @default(0) @map("total_triggered")\n  totalCompleted  Int              @default(0) @map("total_completed")\n  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)\n  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)\n  analyticsEvents AnalyticsEvent[]\n  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("automation_flows")\n}\n\nmodel EmailTemplate {\n  id               String   @id @default(cuid())\n  projectId        String   @map("project_id")\n  userId           String   @map("user_id")\n  name             String\n  subject          String\n  content          String\n  templateType     String   @default("campaign") @map("template_type")\n  variables        Json     @default("{}") @db.JsonB\n  isSystemTemplate Boolean  @default(false) @map("is_system_template")\n  createdAt        DateTime @default(now()) @map("created_at")\n  updatedAt        DateTime @updatedAt @map("updated_at")\n\n  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("email_templates")\n}\n\nmodel AnalyticsEvent {\n  id           String   @id @default(cuid())\n  projectId    String   @map("project_id")\n  userId       String?  @map("user_id")\n  eventType    String   @map("event_type")\n  eventName    String   @map("event_name")\n  eventData    Json     @default("{}") @map("event_data")\n  subscriberId String?  @map("subscriber_id")\n  campaignId   String?  @map("campaign_id")\n  automationId String?  @map("automation_id")\n  sessionId    String?  @map("session_id")\n  userAgent    String?  @map("user_agent")\n  ipAddress    String?  @map("ip_address") @db.Inet\n  referrer     String?\n  utmSource    String?  @map("utm_source")\n  utmMedium    String?  @map("utm_medium")\n  utmCampaign  String?  @map("utm_campaign")\n  utmTerm      String?  @map("utm_term")\n  utmContent   String?  @map("utm_content")\n  createdAt    DateTime @default(now()) @map("created_at")\n\n  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  subscriber Subscriber?     @relation(fields: [subscriberId], references: [id], onDelete: SetNull)\n  campaign   Campaign?       @relation(fields: [campaignId], references: [id], onDelete: SetNull)\n  automation AutomationFlow? @relation(fields: [automationId], references: [id], onDelete: SetNull)\n\n  @@map("analytics_events")\n}\n\nmodel Notification {\n  id        String    @id @default(cuid())\n  userId    String    @map("user_id")\n  projectId String?   @map("project_id")\n  type      String\n  title     String\n  message   String\n  data      Json      @default("{}") @db.JsonB\n  isRead    Boolean   @default(false) @map("is_read")\n  readAt    DateTime? @map("read_at")\n  priority  String    @default("medium")\n  channel   String    @default("in_app")\n  createdAt DateTime  @default(now()) @map("created_at")\n\n  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)\n\n  @@map("notifications")\n}\n\nmodel Integration {\n  id           String    @id @default(cuid())\n  projectId    String    @map("project_id")\n  userId       String    @map("user_id")\n  name         String\n  type         String\n  config       Json      @default("{}") @db.JsonB\n  credentials  Json      @default("{}") @db.JsonB\n  isActive     Boolean   @default(true) @map("is_active")\n  lastSyncAt   DateTime? @map("last_sync_at")\n  syncStatus   String    @default("pending") @map("sync_status")\n  errorMessage String?   @map("error_message")\n  createdAt    DateTime  @default(now()) @map("created_at")\n  updatedAt    DateTime  @updatedAt @map("updated_at")\n\n  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("integrations")\n}\n\n// User role in the system\nenum UserRole {\n  SUPER_ADMIN\n  ADMIN\n  USER\n  GUEST\n}\n\n// Organization member roles\nenum OrganizationRole {\n  OWNER\n  ADMIN\n  MANAGER\n  MEMBER\n  GUEST\n}\n\n// Project member roles\nenum ProjectRole {\n  OWNER\n  ADMIN\n  EDITOR\n  VIEWER\n  CONTRIBUTOR\n}\n',
  inlineSchemaHash:
    "2b7b80307d6dabebc5b37d2ab556faa8e443067970682e88dbee0050dd09cbfb",
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: "",
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"firstName","kind":"scalar","type":"String","dbName":"first_name"},{"name":"lastName","kind":"scalar","type":"String","dbName":"last_name"},{"name":"companyName","kind":"scalar","type":"String","dbName":"company_name"},{"name":"image","kind":"scalar","type":"String"},{"name":"role","kind":"enum","type":"UserRole"},{"name":"phone","kind":"scalar","type":"String"},{"name":"isNewUser","kind":"scalar","type":"Boolean"},{"name":"timezone","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"Boolean","dbName":"email_verified"},{"name":"onboardingCompleted","kind":"scalar","type":"Boolean","dbName":"onboarding_completed"},{"name":"notificationPreferences","kind":"scalar","type":"Json","dbName":"notification_preferences"},{"name":"preferences","kind":"scalar","type":"Json"},{"name":"lastActiveAt","kind":"scalar","type":"DateTime","dbName":"last_active_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"},{"name":"organizationMembers","kind":"object","type":"OrganizationMember","relationName":"OrganizationMemberToUser"},{"name":"projectMembers","kind":"object","type":"ProjectMember","relationName":"ProjectMemberToUser"},{"name":"onboardingProgress","kind":"object","type":"OnboardingProgress","relationName":"OnboardingProgressToUser"},{"name":"campaigns","kind":"object","type":"Campaign","relationName":"CampaignToUser"},{"name":"automationFlows","kind":"object","type":"AutomationFlow","relationName":"AutomationFlowToUser"},{"name":"emailTemplates","kind":"object","type":"EmailTemplate","relationName":"EmailTemplateToUser"},{"name":"integrations","kind":"object","type":"Integration","relationName":"IntegrationToUser"},{"name":"notifications","kind":"object","type":"Notification","relationName":"NotificationToUser"},{"name":"analyticsEvents","kind":"object","type":"AnalyticsEvent","relationName":"AnalyticsEventToUser"},{"name":"invitedOrgMembers","kind":"object","type":"OrganizationMember","relationName":"InvitedBy"},{"name":"invitedProjectMembers","kind":"object","type":"ProjectMember","relationName":"InvitedBy"}],"dbName":"users"},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"expiresAt","kind":"scalar","type":"DateTime","dbName":"expires_at"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"ipAddress","kind":"scalar","type":"String","dbName":"ip_address"},{"name":"userAgent","kind":"scalar","type":"String","dbName":"user_agent"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"lastActivityAt","kind":"scalar","type":"DateTime","dbName":"last_activity_at"},{"name":"project","kind":"object","type":"Project","relationName":"ProjectToSession"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"}],"dbName":"sessions"},"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String","dbName":"account_id"},{"name":"providerId","kind":"scalar","type":"String","dbName":"provider_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"accessToken","kind":"scalar","type":"String","dbName":"access_token"},{"name":"refreshToken","kind":"scalar","type":"String","dbName":"refresh_token"},{"name":"idToken","kind":"scalar","type":"String","dbName":"id_token"},{"name":"accessTokenExpiresAt","kind":"scalar","type":"DateTime","dbName":"access_token_expires_at"},{"name":"refreshTokenExpiresAt","kind":"scalar","type":"DateTime","dbName":"refresh_token_expires_at"},{"name":"scope","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"}],"dbName":"accounts"},"Verification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"identifier","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime","dbName":"expires_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"}],"dbName":"verifications"},"Organization":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"logoUrl","kind":"scalar","type":"String","dbName":"logo_url"},{"name":"settings","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"organizationMembers","kind":"object","type":"OrganizationMember","relationName":"OrganizationToOrganizationMember"},{"name":"projects","kind":"object","type":"Project","relationName":"OrganizationToProject"}],"dbName":"organizations"},"OrganizationMember":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String","dbName":"organization_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"role","kind":"scalar","type":"String"},{"name":"permissions","kind":"scalar","type":"Json"},{"name":"invitedBy","kind":"scalar","type":"String","dbName":"invited_by"},{"name":"invitedAt","kind":"scalar","type":"DateTime","dbName":"invited_at"},{"name":"joinedAt","kind":"scalar","type":"DateTime","dbName":"joined_at"},{"name":"isActive","kind":"scalar","type":"Boolean","dbName":"is_active"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToOrganizationMember"},{"name":"user","kind":"object","type":"User","relationName":"OrganizationMemberToUser"},{"name":"inviter","kind":"object","type":"User","relationName":"InvitedBy"}],"dbName":"organization_members"},"Project":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String","dbName":"organization_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"settings","kind":"scalar","type":"Json"},{"name":"isActive","kind":"scalar","type":"Boolean","dbName":"is_active"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"automationFlows","kind":"object","type":"AutomationFlow","relationName":"AutomationFlowToProject"},{"name":"emailTemplates","kind":"object","type":"EmailTemplate","relationName":"EmailTemplateToProject"},{"name":"integrations","kind":"object","type":"Integration","relationName":"IntegrationToProject"},{"name":"notifications","kind":"object","type":"Notification","relationName":"NotificationToProject"},{"name":"analyticsEvents","kind":"object","type":"AnalyticsEvent","relationName":"AnalyticsEventToProject"},{"name":"sessions","kind":"object","type":"Session","relationName":"ProjectToSession"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToProject"},{"name":"projectMembers","kind":"object","type":"ProjectMember","relationName":"ProjectToProjectMember"},{"name":"campaigns","kind":"object","type":"Campaign","relationName":"CampaignToProject"},{"name":"subscribers","kind":"object","type":"Subscriber","relationName":"ProjectToSubscriber"}],"dbName":"projects"},"ProjectMember":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"role","kind":"scalar","type":"String"},{"name":"permissions","kind":"scalar","type":"Json"},{"name":"invitedBy","kind":"scalar","type":"String","dbName":"invited_by"},{"name":"invitedAt","kind":"scalar","type":"DateTime","dbName":"invited_at"},{"name":"joinedAt","kind":"scalar","type":"DateTime","dbName":"joined_at"},{"name":"isActive","kind":"scalar","type":"Boolean","dbName":"is_active"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"inviter","kind":"object","type":"User","relationName":"InvitedBy"},{"name":"project","kind":"object","type":"Project","relationName":"ProjectToProjectMember"},{"name":"user","kind":"object","type":"User","relationName":"ProjectMemberToUser"}],"dbName":"project_members"},"OnboardingProgress":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"currentStep","kind":"scalar","type":"String","dbName":"current_step"},{"name":"completedSteps","kind":"scalar","type":"String","dbName":"completed_steps"},{"name":"totalSteps","kind":"scalar","type":"Int","dbName":"total_steps"},{"name":"completionPercentage","kind":"scalar","type":"Decimal","dbName":"completion_percentage"},{"name":"isCompleted","kind":"scalar","type":"Boolean","dbName":"is_completed"},{"name":"startedAt","kind":"scalar","type":"DateTime","dbName":"started_at"},{"name":"completedAt","kind":"scalar","type":"DateTime","dbName":"completed_at"},{"name":"lastActivityAt","kind":"scalar","type":"DateTime","dbName":"last_activity_at"},{"name":"stepData","kind":"scalar","type":"Json","dbName":"step_data"},{"name":"timeSpentSeconds","kind":"scalar","type":"Int","dbName":"time_spent_seconds"},{"name":"sessionCount","kind":"scalar","type":"Int","dbName":"session_count"},{"name":"abandonedAt","kind":"scalar","type":"DateTime","dbName":"abandoned_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"user","kind":"object","type":"User","relationName":"OnboardingProgressToUser"},{"name":"onboardingStepLogs","kind":"object","type":"OnboardingStepLog","relationName":"OnboardingProgressToOnboardingStepLog"}],"dbName":"onboarding_progress"},"OnboardingStepLog":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"onboardingId","kind":"scalar","type":"String","dbName":"onboarding_id"},{"name":"stepName","kind":"scalar","type":"String","dbName":"step_name"},{"name":"action","kind":"scalar","type":"String"},{"name":"timeSpentSeconds","kind":"scalar","type":"Int","dbName":"time_spent_seconds"},{"name":"stepData","kind":"scalar","type":"Json","dbName":"step_data"},{"name":"userAgent","kind":"scalar","type":"String","dbName":"user_agent"},{"name":"ipAddress","kind":"scalar","type":"String","dbName":"ip_address"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"onboarding","kind":"object","type":"OnboardingProgress","relationName":"OnboardingProgressToOnboardingStepLog"}],"dbName":"onboarding_step_logs"},"Campaign":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"settings","kind":"scalar","type":"Json"},{"name":"content","kind":"scalar","type":"Json"},{"name":"totalSubscribers","kind":"scalar","type":"Int","dbName":"total_subscribers"},{"name":"activeSubscribers","kind":"scalar","type":"Int","dbName":"active_subscribers"},{"name":"conversionRate","kind":"scalar","type":"Decimal","dbName":"conversion_rate"},{"name":"scheduledAt","kind":"scalar","type":"DateTime","dbName":"scheduled_at"},{"name":"launchedAt","kind":"scalar","type":"DateTime","dbName":"launched_at"},{"name":"completedAt","kind":"scalar","type":"DateTime","dbName":"completed_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"project","kind":"object","type":"Project","relationName":"CampaignToProject"},{"name":"user","kind":"object","type":"User","relationName":"CampaignToUser"},{"name":"subscribers","kind":"object","type":"Subscriber","relationName":"CampaignToSubscriber"},{"name":"analyticsEvents","kind":"object","type":"AnalyticsEvent","relationName":"AnalyticsEventToCampaign"}],"dbName":"campaigns"},"Subscriber":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"campaignId","kind":"scalar","type":"String","dbName":"campaign_id"},{"name":"email","kind":"scalar","type":"String"},{"name":"firstName","kind":"scalar","type":"String","dbName":"first_name"},{"name":"lastName","kind":"scalar","type":"String","dbName":"last_name"},{"name":"phone","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"tags","kind":"scalar","type":"String"},{"name":"customFields","kind":"scalar","type":"Json","dbName":"custom_fields"},{"name":"source","kind":"scalar","type":"String"},{"name":"optedInAt","kind":"scalar","type":"DateTime","dbName":"opted_in_at"},{"name":"unsubscribedAt","kind":"scalar","type":"DateTime","dbName":"unsubscribed_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"analyticsEvents","kind":"object","type":"AnalyticsEvent","relationName":"AnalyticsEventToSubscriber"},{"name":"campaign","kind":"object","type":"Campaign","relationName":"CampaignToSubscriber"},{"name":"project","kind":"object","type":"Project","relationName":"ProjectToSubscriber"}],"dbName":"subscribers"},"AutomationFlow":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"triggerType","kind":"scalar","type":"String","dbName":"trigger_type"},{"name":"triggerConfig","kind":"scalar","type":"Json","dbName":"trigger_config"},{"name":"actions","kind":"scalar","type":"Json"},{"name":"conditions","kind":"scalar","type":"Json"},{"name":"status","kind":"scalar","type":"String"},{"name":"totalTriggered","kind":"scalar","type":"Int","dbName":"total_triggered"},{"name":"totalCompleted","kind":"scalar","type":"Int","dbName":"total_completed"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"analyticsEvents","kind":"object","type":"AnalyticsEvent","relationName":"AnalyticsEventToAutomationFlow"},{"name":"project","kind":"object","type":"Project","relationName":"AutomationFlowToProject"},{"name":"user","kind":"object","type":"User","relationName":"AutomationFlowToUser"}],"dbName":"automation_flows"},"EmailTemplate":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"subject","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"templateType","kind":"scalar","type":"String","dbName":"template_type"},{"name":"variables","kind":"scalar","type":"Json"},{"name":"isSystemTemplate","kind":"scalar","type":"Boolean","dbName":"is_system_template"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"project","kind":"object","type":"Project","relationName":"EmailTemplateToProject"},{"name":"user","kind":"object","type":"User","relationName":"EmailTemplateToUser"}],"dbName":"email_templates"},"AnalyticsEvent":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"eventType","kind":"scalar","type":"String","dbName":"event_type"},{"name":"eventName","kind":"scalar","type":"String","dbName":"event_name"},{"name":"eventData","kind":"scalar","type":"Json","dbName":"event_data"},{"name":"subscriberId","kind":"scalar","type":"String","dbName":"subscriber_id"},{"name":"campaignId","kind":"scalar","type":"String","dbName":"campaign_id"},{"name":"automationId","kind":"scalar","type":"String","dbName":"automation_id"},{"name":"sessionId","kind":"scalar","type":"String","dbName":"session_id"},{"name":"userAgent","kind":"scalar","type":"String","dbName":"user_agent"},{"name":"ipAddress","kind":"scalar","type":"String","dbName":"ip_address"},{"name":"referrer","kind":"scalar","type":"String"},{"name":"utmSource","kind":"scalar","type":"String","dbName":"utm_source"},{"name":"utmMedium","kind":"scalar","type":"String","dbName":"utm_medium"},{"name":"utmCampaign","kind":"scalar","type":"String","dbName":"utm_campaign"},{"name":"utmTerm","kind":"scalar","type":"String","dbName":"utm_term"},{"name":"utmContent","kind":"scalar","type":"String","dbName":"utm_content"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"project","kind":"object","type":"Project","relationName":"AnalyticsEventToProject"},{"name":"user","kind":"object","type":"User","relationName":"AnalyticsEventToUser"},{"name":"subscriber","kind":"object","type":"Subscriber","relationName":"AnalyticsEventToSubscriber"},{"name":"campaign","kind":"object","type":"Campaign","relationName":"AnalyticsEventToCampaign"},{"name":"automation","kind":"object","type":"AutomationFlow","relationName":"AnalyticsEventToAutomationFlow"}],"dbName":"analytics_events"},"Notification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"type","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"message","kind":"scalar","type":"String"},{"name":"data","kind":"scalar","type":"Json"},{"name":"isRead","kind":"scalar","type":"Boolean","dbName":"is_read"},{"name":"readAt","kind":"scalar","type":"DateTime","dbName":"read_at"},{"name":"priority","kind":"scalar","type":"String"},{"name":"channel","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"user","kind":"object","type":"User","relationName":"NotificationToUser"},{"name":"project","kind":"object","type":"Project","relationName":"NotificationToProject"}],"dbName":"notifications"},"Integration":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"projectId","kind":"scalar","type":"String","dbName":"project_id"},{"name":"userId","kind":"scalar","type":"String","dbName":"user_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"config","kind":"scalar","type":"Json"},{"name":"credentials","kind":"scalar","type":"Json"},{"name":"isActive","kind":"scalar","type":"Boolean","dbName":"is_active"},{"name":"lastSyncAt","kind":"scalar","type":"DateTime","dbName":"last_sync_at"},{"name":"syncStatus","kind":"scalar","type":"String","dbName":"sync_status"},{"name":"errorMessage","kind":"scalar","type":"String","dbName":"error_message"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"},{"name":"project","kind":"object","type":"Project","relationName":"IntegrationToProject"},{"name":"user","kind":"object","type":"User","relationName":"IntegrationToUser"}],"dbName":"integrations"}},"enums":{},"types":{}}'
);
config.engineWasm = undefined;

async function decodeBase64AsWasm(
  wasmBase64: string
): Promise<WebAssembly.Module> {
  const { Buffer } = await import("node:buffer");
  const wasmArray = Buffer.from(wasmBase64, "base64");
  return new WebAssembly.Module(wasmArray);
}

config.compilerWasm = {
  getRuntime: async () =>
    await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import(
      "@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs"
    );
    return await decodeBase64AsWasm(wasm);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  "log" extends keyof ClientOptions
    ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions["log"]>
      : never
    : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions["omit"] = Options extends {
      omit: infer U;
    }
      ? U
      : Prisma.PrismaClientOptions["omit"],
    ExtArgs extends
      runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<Options, Prisma.PrismaClientOptions>
  ): PrismaClient<LogOpts, OmitOpts, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends
    Prisma.PrismaClientOptions["omit"] = Prisma.PrismaClientOptions["omit"],
  in out ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  $on<V extends LogOpts>(
    eventType: V,
    callback: (
      event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent
    ) => void
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>
    ) => runtime.Types.Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    }
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    "extends",
    Prisma.TypeMapCb<OmitOpts>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<OmitOpts>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   */
  get account(): Prisma.AccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Verifications
   * const verifications = await prisma.verification.findMany()
   * ```
   */
  get verification(): Prisma.VerificationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organizationMember`: Exposes CRUD operations for the **OrganizationMember** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrganizationMembers
   * const organizationMembers = await prisma.organizationMember.findMany()
   * ```
   */
  get organizationMember(): Prisma.OrganizationMemberDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   */
  get project(): Prisma.ProjectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.projectMember`: Exposes CRUD operations for the **ProjectMember** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ProjectMembers
   * const projectMembers = await prisma.projectMember.findMany()
   * ```
   */
  get projectMember(): Prisma.ProjectMemberDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.onboardingProgress`: Exposes CRUD operations for the **OnboardingProgress** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OnboardingProgresses
   * const onboardingProgresses = await prisma.onboardingProgress.findMany()
   * ```
   */
  get onboardingProgress(): Prisma.OnboardingProgressDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.onboardingStepLog`: Exposes CRUD operations for the **OnboardingStepLog** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OnboardingStepLogs
   * const onboardingStepLogs = await prisma.onboardingStepLog.findMany()
   * ```
   */
  get onboardingStepLog(): Prisma.OnboardingStepLogDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Campaigns
   * const campaigns = await prisma.campaign.findMany()
   * ```
   */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.subscriber`: Exposes CRUD operations for the **Subscriber** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Subscribers
   * const subscribers = await prisma.subscriber.findMany()
   * ```
   */
  get subscriber(): Prisma.SubscriberDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.automationFlow`: Exposes CRUD operations for the **AutomationFlow** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AutomationFlows
   * const automationFlows = await prisma.automationFlow.findMany()
   * ```
   */
  get automationFlow(): Prisma.AutomationFlowDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.emailTemplate`: Exposes CRUD operations for the **EmailTemplate** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EmailTemplates
   * const emailTemplates = await prisma.emailTemplate.findMany()
   * ```
   */
  get emailTemplate(): Prisma.EmailTemplateDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.analyticsEvent`: Exposes CRUD operations for the **AnalyticsEvent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AnalyticsEvents
   * const analyticsEvents = await prisma.analyticsEvent.findMany()
   * ```
   */
  get analyticsEvent(): Prisma.AnalyticsEventDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Notifications
   * const notifications = await prisma.notification.findMany()
   * ```
   */
  get notification(): Prisma.NotificationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Integrations
   * const integrations = await prisma.integration.findMany()
   * ```
   */
  get integration(): Prisma.IntegrationDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
