
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Waitlist` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Waitlist
 * 
 */
export type WaitlistModel = runtime.Types.Result.DefaultSelection<Prisma.$WaitlistPayload>

export type AggregateWaitlist = {
  _count: WaitlistCountAggregateOutputType | null
  _min: WaitlistMinAggregateOutputType | null
  _max: WaitlistMaxAggregateOutputType | null
}

export type WaitlistMinAggregateOutputType = {
  id: string | null
  product: string | null
  mode: string | null
  email: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WaitlistMaxAggregateOutputType = {
  id: string | null
  product: string | null
  mode: string | null
  email: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WaitlistCountAggregateOutputType = {
  id: number
  product: number
  mode: number
  email: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WaitlistMinAggregateInputType = {
  id?: true
  product?: true
  mode?: true
  email?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type WaitlistMaxAggregateInputType = {
  id?: true
  product?: true
  mode?: true
  email?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type WaitlistCountAggregateInputType = {
  id?: true
  product?: true
  mode?: true
  email?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WaitlistAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Waitlist to aggregate.
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Waitlists to fetch.
   */
  orderBy?: Prisma.WaitlistOrderByWithRelationInput | Prisma.WaitlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WaitlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Waitlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Waitlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Waitlists
  **/
  _count?: true | WaitlistCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WaitlistMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WaitlistMaxAggregateInputType
}

export type GetWaitlistAggregateType<T extends WaitlistAggregateArgs> = {
      [P in keyof T & keyof AggregateWaitlist]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWaitlist[P]>
    : Prisma.GetScalarType<T[P], AggregateWaitlist[P]>
}




export type WaitlistGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WaitlistWhereInput
  orderBy?: Prisma.WaitlistOrderByWithAggregationInput | Prisma.WaitlistOrderByWithAggregationInput[]
  by: Prisma.WaitlistScalarFieldEnum[] | Prisma.WaitlistScalarFieldEnum
  having?: Prisma.WaitlistScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WaitlistCountAggregateInputType | true
  _min?: WaitlistMinAggregateInputType
  _max?: WaitlistMaxAggregateInputType
}

export type WaitlistGroupByOutputType = {
  id: string
  product: string
  mode: string
  email: string
  name: string | null
  createdAt: Date
  updatedAt: Date
  _count: WaitlistCountAggregateOutputType | null
  _min: WaitlistMinAggregateOutputType | null
  _max: WaitlistMaxAggregateOutputType | null
}

type GetWaitlistGroupByPayload<T extends WaitlistGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WaitlistGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WaitlistGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WaitlistGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WaitlistGroupByOutputType[P]>
      }
    >
  >



export type WaitlistWhereInput = {
  AND?: Prisma.WaitlistWhereInput | Prisma.WaitlistWhereInput[]
  OR?: Prisma.WaitlistWhereInput[]
  NOT?: Prisma.WaitlistWhereInput | Prisma.WaitlistWhereInput[]
  id?: Prisma.StringFilter<"Waitlist"> | string
  product?: Prisma.StringFilter<"Waitlist"> | string
  mode?: Prisma.StringFilter<"Waitlist"> | string
  email?: Prisma.StringFilter<"Waitlist"> | string
  name?: Prisma.StringNullableFilter<"Waitlist"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Waitlist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Waitlist"> | Date | string
}

export type WaitlistOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  product?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WaitlistWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  product_email?: Prisma.WaitlistProductEmailCompoundUniqueInput
  AND?: Prisma.WaitlistWhereInput | Prisma.WaitlistWhereInput[]
  OR?: Prisma.WaitlistWhereInput[]
  NOT?: Prisma.WaitlistWhereInput | Prisma.WaitlistWhereInput[]
  product?: Prisma.StringFilter<"Waitlist"> | string
  mode?: Prisma.StringFilter<"Waitlist"> | string
  email?: Prisma.StringFilter<"Waitlist"> | string
  name?: Prisma.StringNullableFilter<"Waitlist"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Waitlist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Waitlist"> | Date | string
}, "id" | "product_email">

export type WaitlistOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  product?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WaitlistCountOrderByAggregateInput
  _max?: Prisma.WaitlistMaxOrderByAggregateInput
  _min?: Prisma.WaitlistMinOrderByAggregateInput
}

export type WaitlistScalarWhereWithAggregatesInput = {
  AND?: Prisma.WaitlistScalarWhereWithAggregatesInput | Prisma.WaitlistScalarWhereWithAggregatesInput[]
  OR?: Prisma.WaitlistScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WaitlistScalarWhereWithAggregatesInput | Prisma.WaitlistScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Waitlist"> | string
  product?: Prisma.StringWithAggregatesFilter<"Waitlist"> | string
  mode?: Prisma.StringWithAggregatesFilter<"Waitlist"> | string
  email?: Prisma.StringWithAggregatesFilter<"Waitlist"> | string
  name?: Prisma.StringNullableWithAggregatesFilter<"Waitlist"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Waitlist"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Waitlist"> | Date | string
}

export type WaitlistCreateInput = {
  id?: string
  product: string
  mode: string
  email: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WaitlistUncheckedCreateInput = {
  id?: string
  product: string
  mode: string
  email: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WaitlistUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.StringFieldUpdateOperationsInput | string
  mode?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WaitlistUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.StringFieldUpdateOperationsInput | string
  mode?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WaitlistCreateManyInput = {
  id?: string
  product: string
  mode: string
  email: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WaitlistUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.StringFieldUpdateOperationsInput | string
  mode?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WaitlistUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.StringFieldUpdateOperationsInput | string
  mode?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WaitlistProductEmailCompoundUniqueInput = {
  product: string
  email: string
}

export type WaitlistCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  product?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WaitlistMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  product?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WaitlistMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  product?: Prisma.SortOrder
  mode?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type WaitlistSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  product?: boolean
  mode?: boolean
  email?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["waitlist"]>

export type WaitlistSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  product?: boolean
  mode?: boolean
  email?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["waitlist"]>

export type WaitlistSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  product?: boolean
  mode?: boolean
  email?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["waitlist"]>

export type WaitlistSelectScalar = {
  id?: boolean
  product?: boolean
  mode?: boolean
  email?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WaitlistOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "product" | "mode" | "email" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["waitlist"]>

export type $WaitlistPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Waitlist"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    product: string
    mode: string
    email: string
    name: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["waitlist"]>
  composites: {}
}

export type WaitlistGetPayload<S extends boolean | null | undefined | WaitlistDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WaitlistPayload, S>

export type WaitlistCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WaitlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WaitlistCountAggregateInputType | true
  }

export interface WaitlistDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Waitlist'], meta: { name: 'Waitlist' } }
  /**
   * Find zero or one Waitlist that matches the filter.
   * @param {WaitlistFindUniqueArgs} args - Arguments to find a Waitlist
   * @example
   * // Get one Waitlist
   * const waitlist = await prisma.waitlist.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WaitlistFindUniqueArgs>(args: Prisma.SelectSubset<T, WaitlistFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Waitlist that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WaitlistFindUniqueOrThrowArgs} args - Arguments to find a Waitlist
   * @example
   * // Get one Waitlist
   * const waitlist = await prisma.waitlist.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WaitlistFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WaitlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Waitlist that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistFindFirstArgs} args - Arguments to find a Waitlist
   * @example
   * // Get one Waitlist
   * const waitlist = await prisma.waitlist.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WaitlistFindFirstArgs>(args?: Prisma.SelectSubset<T, WaitlistFindFirstArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Waitlist that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistFindFirstOrThrowArgs} args - Arguments to find a Waitlist
   * @example
   * // Get one Waitlist
   * const waitlist = await prisma.waitlist.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WaitlistFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WaitlistFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Waitlists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Waitlists
   * const waitlists = await prisma.waitlist.findMany()
   * 
   * // Get first 10 Waitlists
   * const waitlists = await prisma.waitlist.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const waitlistWithIdOnly = await prisma.waitlist.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WaitlistFindManyArgs>(args?: Prisma.SelectSubset<T, WaitlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Waitlist.
   * @param {WaitlistCreateArgs} args - Arguments to create a Waitlist.
   * @example
   * // Create one Waitlist
   * const Waitlist = await prisma.waitlist.create({
   *   data: {
   *     // ... data to create a Waitlist
   *   }
   * })
   * 
   */
  create<T extends WaitlistCreateArgs>(args: Prisma.SelectSubset<T, WaitlistCreateArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Waitlists.
   * @param {WaitlistCreateManyArgs} args - Arguments to create many Waitlists.
   * @example
   * // Create many Waitlists
   * const waitlist = await prisma.waitlist.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WaitlistCreateManyArgs>(args?: Prisma.SelectSubset<T, WaitlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Waitlists and returns the data saved in the database.
   * @param {WaitlistCreateManyAndReturnArgs} args - Arguments to create many Waitlists.
   * @example
   * // Create many Waitlists
   * const waitlist = await prisma.waitlist.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Waitlists and only return the `id`
   * const waitlistWithIdOnly = await prisma.waitlist.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WaitlistCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WaitlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Waitlist.
   * @param {WaitlistDeleteArgs} args - Arguments to delete one Waitlist.
   * @example
   * // Delete one Waitlist
   * const Waitlist = await prisma.waitlist.delete({
   *   where: {
   *     // ... filter to delete one Waitlist
   *   }
   * })
   * 
   */
  delete<T extends WaitlistDeleteArgs>(args: Prisma.SelectSubset<T, WaitlistDeleteArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Waitlist.
   * @param {WaitlistUpdateArgs} args - Arguments to update one Waitlist.
   * @example
   * // Update one Waitlist
   * const waitlist = await prisma.waitlist.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WaitlistUpdateArgs>(args: Prisma.SelectSubset<T, WaitlistUpdateArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Waitlists.
   * @param {WaitlistDeleteManyArgs} args - Arguments to filter Waitlists to delete.
   * @example
   * // Delete a few Waitlists
   * const { count } = await prisma.waitlist.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WaitlistDeleteManyArgs>(args?: Prisma.SelectSubset<T, WaitlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Waitlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Waitlists
   * const waitlist = await prisma.waitlist.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WaitlistUpdateManyArgs>(args: Prisma.SelectSubset<T, WaitlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Waitlists and returns the data updated in the database.
   * @param {WaitlistUpdateManyAndReturnArgs} args - Arguments to update many Waitlists.
   * @example
   * // Update many Waitlists
   * const waitlist = await prisma.waitlist.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Waitlists and only return the `id`
   * const waitlistWithIdOnly = await prisma.waitlist.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WaitlistUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WaitlistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Waitlist.
   * @param {WaitlistUpsertArgs} args - Arguments to update or create a Waitlist.
   * @example
   * // Update or create a Waitlist
   * const waitlist = await prisma.waitlist.upsert({
   *   create: {
   *     // ... data to create a Waitlist
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Waitlist we want to update
   *   }
   * })
   */
  upsert<T extends WaitlistUpsertArgs>(args: Prisma.SelectSubset<T, WaitlistUpsertArgs<ExtArgs>>): Prisma.Prisma__WaitlistClient<runtime.Types.Result.GetResult<Prisma.$WaitlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Waitlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistCountArgs} args - Arguments to filter Waitlists to count.
   * @example
   * // Count the number of Waitlists
   * const count = await prisma.waitlist.count({
   *   where: {
   *     // ... the filter for the Waitlists we want to count
   *   }
   * })
  **/
  count<T extends WaitlistCountArgs>(
    args?: Prisma.Subset<T, WaitlistCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WaitlistCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Waitlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WaitlistAggregateArgs>(args: Prisma.Subset<T, WaitlistAggregateArgs>): Prisma.PrismaPromise<GetWaitlistAggregateType<T>>

  /**
   * Group by Waitlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WaitlistGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WaitlistGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WaitlistGroupByArgs['orderBy'] }
      : { orderBy?: WaitlistGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WaitlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaitlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Waitlist model
 */
readonly fields: WaitlistFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Waitlist.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WaitlistClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Waitlist model
 */
export interface WaitlistFieldRefs {
  readonly id: Prisma.FieldRef<"Waitlist", 'String'>
  readonly product: Prisma.FieldRef<"Waitlist", 'String'>
  readonly mode: Prisma.FieldRef<"Waitlist", 'String'>
  readonly email: Prisma.FieldRef<"Waitlist", 'String'>
  readonly name: Prisma.FieldRef<"Waitlist", 'String'>
  readonly createdAt: Prisma.FieldRef<"Waitlist", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Waitlist", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Waitlist findUnique
 */
export type WaitlistFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter, which Waitlist to fetch.
   */
  where: Prisma.WaitlistWhereUniqueInput
}

/**
 * Waitlist findUniqueOrThrow
 */
export type WaitlistFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter, which Waitlist to fetch.
   */
  where: Prisma.WaitlistWhereUniqueInput
}

/**
 * Waitlist findFirst
 */
export type WaitlistFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter, which Waitlist to fetch.
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Waitlists to fetch.
   */
  orderBy?: Prisma.WaitlistOrderByWithRelationInput | Prisma.WaitlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Waitlists.
   */
  cursor?: Prisma.WaitlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Waitlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Waitlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Waitlists.
   */
  distinct?: Prisma.WaitlistScalarFieldEnum | Prisma.WaitlistScalarFieldEnum[]
}

/**
 * Waitlist findFirstOrThrow
 */
export type WaitlistFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter, which Waitlist to fetch.
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Waitlists to fetch.
   */
  orderBy?: Prisma.WaitlistOrderByWithRelationInput | Prisma.WaitlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Waitlists.
   */
  cursor?: Prisma.WaitlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Waitlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Waitlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Waitlists.
   */
  distinct?: Prisma.WaitlistScalarFieldEnum | Prisma.WaitlistScalarFieldEnum[]
}

/**
 * Waitlist findMany
 */
export type WaitlistFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter, which Waitlists to fetch.
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Waitlists to fetch.
   */
  orderBy?: Prisma.WaitlistOrderByWithRelationInput | Prisma.WaitlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Waitlists.
   */
  cursor?: Prisma.WaitlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Waitlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Waitlists.
   */
  skip?: number
  distinct?: Prisma.WaitlistScalarFieldEnum | Prisma.WaitlistScalarFieldEnum[]
}

/**
 * Waitlist create
 */
export type WaitlistCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * The data needed to create a Waitlist.
   */
  data: Prisma.XOR<Prisma.WaitlistCreateInput, Prisma.WaitlistUncheckedCreateInput>
}

/**
 * Waitlist createMany
 */
export type WaitlistCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Waitlists.
   */
  data: Prisma.WaitlistCreateManyInput | Prisma.WaitlistCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Waitlist createManyAndReturn
 */
export type WaitlistCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * The data used to create many Waitlists.
   */
  data: Prisma.WaitlistCreateManyInput | Prisma.WaitlistCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Waitlist update
 */
export type WaitlistUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * The data needed to update a Waitlist.
   */
  data: Prisma.XOR<Prisma.WaitlistUpdateInput, Prisma.WaitlistUncheckedUpdateInput>
  /**
   * Choose, which Waitlist to update.
   */
  where: Prisma.WaitlistWhereUniqueInput
}

/**
 * Waitlist updateMany
 */
export type WaitlistUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Waitlists.
   */
  data: Prisma.XOR<Prisma.WaitlistUpdateManyMutationInput, Prisma.WaitlistUncheckedUpdateManyInput>
  /**
   * Filter which Waitlists to update
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * Limit how many Waitlists to update.
   */
  limit?: number
}

/**
 * Waitlist updateManyAndReturn
 */
export type WaitlistUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * The data used to update Waitlists.
   */
  data: Prisma.XOR<Prisma.WaitlistUpdateManyMutationInput, Prisma.WaitlistUncheckedUpdateManyInput>
  /**
   * Filter which Waitlists to update
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * Limit how many Waitlists to update.
   */
  limit?: number
}

/**
 * Waitlist upsert
 */
export type WaitlistUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * The filter to search for the Waitlist to update in case it exists.
   */
  where: Prisma.WaitlistWhereUniqueInput
  /**
   * In case the Waitlist found by the `where` argument doesn't exist, create a new Waitlist with this data.
   */
  create: Prisma.XOR<Prisma.WaitlistCreateInput, Prisma.WaitlistUncheckedCreateInput>
  /**
   * In case the Waitlist was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WaitlistUpdateInput, Prisma.WaitlistUncheckedUpdateInput>
}

/**
 * Waitlist delete
 */
export type WaitlistDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
  /**
   * Filter which Waitlist to delete.
   */
  where: Prisma.WaitlistWhereUniqueInput
}

/**
 * Waitlist deleteMany
 */
export type WaitlistDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Waitlists to delete
   */
  where?: Prisma.WaitlistWhereInput
  /**
   * Limit how many Waitlists to delete.
   */
  limit?: number
}

/**
 * Waitlist without action
 */
export type WaitlistDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Waitlist
   */
  select?: Prisma.WaitlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Waitlist
   */
  omit?: Prisma.WaitlistOmit<ExtArgs> | null
}
