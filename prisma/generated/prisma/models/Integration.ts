/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Integration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Integration
 *
 */
export type IntegrationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$IntegrationPayload>;

export type AggregateIntegration = {
  _count: IntegrationCountAggregateOutputType | null;
  _min: IntegrationMinAggregateOutputType | null;
  _max: IntegrationMaxAggregateOutputType | null;
};

export type IntegrationMinAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  userId: string | null;
  name: string | null;
  type: string | null;
  isActive: boolean | null;
  lastSyncAt: Date | null;
  syncStatus: string | null;
  errorMessage: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type IntegrationMaxAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  userId: string | null;
  name: string | null;
  type: string | null;
  isActive: boolean | null;
  lastSyncAt: Date | null;
  syncStatus: string | null;
  errorMessage: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type IntegrationCountAggregateOutputType = {
  id: number;
  projectId: number;
  userId: number;
  name: number;
  type: number;
  config: number;
  credentials: number;
  isActive: number;
  lastSyncAt: number;
  syncStatus: number;
  errorMessage: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type IntegrationMinAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  name?: true;
  type?: true;
  isActive?: true;
  lastSyncAt?: true;
  syncStatus?: true;
  errorMessage?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type IntegrationMaxAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  name?: true;
  type?: true;
  isActive?: true;
  lastSyncAt?: true;
  syncStatus?: true;
  errorMessage?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type IntegrationCountAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  name?: true;
  type?: true;
  config?: true;
  credentials?: true;
  isActive?: true;
  lastSyncAt?: true;
  syncStatus?: true;
  errorMessage?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type IntegrationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Integration to aggregate.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Integrations
   **/
  _count?: true | IntegrationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: IntegrationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: IntegrationMaxAggregateInputType;
};

export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
  [P in keyof T & keyof AggregateIntegration]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIntegration[P]>
    : Prisma.GetScalarType<T[P], AggregateIntegration[P]>;
};

export type IntegrationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IntegrationWhereInput;
  orderBy?:
    | Prisma.IntegrationOrderByWithAggregationInput
    | Prisma.IntegrationOrderByWithAggregationInput[];
  by: Prisma.IntegrationScalarFieldEnum[] | Prisma.IntegrationScalarFieldEnum;
  having?: Prisma.IntegrationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: IntegrationCountAggregateInputType | true;
  _min?: IntegrationMinAggregateInputType;
  _max?: IntegrationMaxAggregateInputType;
};

export type IntegrationGroupByOutputType = {
  id: string;
  projectId: string;
  userId: string;
  name: string;
  type: string;
  config: runtime.JsonValue;
  credentials: runtime.JsonValue;
  isActive: boolean;
  lastSyncAt: Date | null;
  syncStatus: string;
  errorMessage: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: IntegrationCountAggregateOutputType | null;
  _min: IntegrationMinAggregateOutputType | null;
  _max: IntegrationMaxAggregateOutputType | null;
};

type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<IntegrationGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof IntegrationGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IntegrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IntegrationGroupByOutputType[P]>;
      }
    >
  >;

export type IntegrationWhereInput = {
  AND?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
  OR?: Prisma.IntegrationWhereInput[];
  NOT?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
  id?: Prisma.StringFilter<"Integration"> | string;
  projectId?: Prisma.StringFilter<"Integration"> | string;
  userId?: Prisma.StringFilter<"Integration"> | string;
  name?: Prisma.StringFilter<"Integration"> | string;
  type?: Prisma.StringFilter<"Integration"> | string;
  config?: Prisma.JsonFilter<"Integration">;
  credentials?: Prisma.JsonFilter<"Integration">;
  isActive?: Prisma.BoolFilter<"Integration"> | boolean;
  lastSyncAt?:
    | Prisma.DateTimeNullableFilter<"Integration">
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFilter<"Integration"> | string;
  errorMessage?: Prisma.StringNullableFilter<"Integration"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type IntegrationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  credentials?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  lastSyncAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  syncStatus?: Prisma.SortOrder;
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  project?: Prisma.ProjectOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type IntegrationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
    OR?: Prisma.IntegrationWhereInput[];
    NOT?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
    projectId?: Prisma.StringFilter<"Integration"> | string;
    userId?: Prisma.StringFilter<"Integration"> | string;
    name?: Prisma.StringFilter<"Integration"> | string;
    type?: Prisma.StringFilter<"Integration"> | string;
    config?: Prisma.JsonFilter<"Integration">;
    credentials?: Prisma.JsonFilter<"Integration">;
    isActive?: Prisma.BoolFilter<"Integration"> | boolean;
    lastSyncAt?:
      | Prisma.DateTimeNullableFilter<"Integration">
      | Date
      | string
      | null;
    syncStatus?: Prisma.StringFilter<"Integration"> | string;
    errorMessage?: Prisma.StringNullableFilter<"Integration"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type IntegrationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  credentials?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  lastSyncAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  syncStatus?: Prisma.SortOrder;
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.IntegrationCountOrderByAggregateInput;
  _max?: Prisma.IntegrationMaxOrderByAggregateInput;
  _min?: Prisma.IntegrationMinOrderByAggregateInput;
};

export type IntegrationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.IntegrationScalarWhereWithAggregatesInput
    | Prisma.IntegrationScalarWhereWithAggregatesInput[];
  OR?: Prisma.IntegrationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.IntegrationScalarWhereWithAggregatesInput
    | Prisma.IntegrationScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  projectId?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  type?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  config?: Prisma.JsonWithAggregatesFilter<"Integration">;
  credentials?: Prisma.JsonWithAggregatesFilter<"Integration">;
  isActive?: Prisma.BoolWithAggregatesFilter<"Integration"> | boolean;
  lastSyncAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Integration">
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringWithAggregatesFilter<"Integration"> | string;
  errorMessage?:
    | Prisma.StringNullableWithAggregatesFilter<"Integration">
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"Integration">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"Integration">
    | Date
    | string;
};

export type IntegrationCreateInput = {
  id?: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutIntegrationsInput;
  user: Prisma.UserCreateNestedOneWithoutIntegrationsInput;
};

export type IntegrationUncheckedCreateInput = {
  id?: string;
  projectId: string;
  userId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutIntegrationsNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutIntegrationsNestedInput;
};

export type IntegrationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationCreateManyInput = {
  id?: string;
  projectId: string;
  userId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationListRelationFilter = {
  every?: Prisma.IntegrationWhereInput;
  some?: Prisma.IntegrationWhereInput;
  none?: Prisma.IntegrationWhereInput;
};

export type IntegrationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type IntegrationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  credentials?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  lastSyncAt?: Prisma.SortOrder;
  syncStatus?: Prisma.SortOrder;
  errorMessage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  lastSyncAt?: Prisma.SortOrder;
  syncStatus?: Prisma.SortOrder;
  errorMessage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  lastSyncAt?: Prisma.SortOrder;
  syncStatus?: Prisma.SortOrder;
  errorMessage?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutUserInput,
        Prisma.IntegrationUncheckedCreateWithoutUserInput
      >
    | Prisma.IntegrationCreateWithoutUserInput[]
    | Prisma.IntegrationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutUserInput
    | Prisma.IntegrationCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.IntegrationCreateManyUserInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutUserInput,
        Prisma.IntegrationUncheckedCreateWithoutUserInput
      >
    | Prisma.IntegrationCreateWithoutUserInput[]
    | Prisma.IntegrationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutUserInput
    | Prisma.IntegrationCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.IntegrationCreateManyUserInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutUserInput,
        Prisma.IntegrationUncheckedCreateWithoutUserInput
      >
    | Prisma.IntegrationCreateWithoutUserInput[]
    | Prisma.IntegrationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutUserInput
    | Prisma.IntegrationCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutUserInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.IntegrationCreateManyUserInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutUserInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutUserInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutUserInput,
        Prisma.IntegrationUncheckedCreateWithoutUserInput
      >
    | Prisma.IntegrationCreateWithoutUserInput[]
    | Prisma.IntegrationUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutUserInput
    | Prisma.IntegrationCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutUserInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.IntegrationCreateManyUserInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutUserInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutUserInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutProjectInput,
        Prisma.IntegrationUncheckedCreateWithoutProjectInput
      >
    | Prisma.IntegrationCreateWithoutProjectInput[]
    | Prisma.IntegrationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.IntegrationCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutProjectInput,
        Prisma.IntegrationUncheckedCreateWithoutProjectInput
      >
    | Prisma.IntegrationCreateWithoutProjectInput[]
    | Prisma.IntegrationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.IntegrationCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutProjectInput,
        Prisma.IntegrationUncheckedCreateWithoutProjectInput
      >
    | Prisma.IntegrationCreateWithoutProjectInput[]
    | Prisma.IntegrationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.IntegrationCreateManyProjectInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutProjectInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutProjectInput,
        Prisma.IntegrationUncheckedCreateWithoutProjectInput
      >
    | Prisma.IntegrationCreateWithoutProjectInput[]
    | Prisma.IntegrationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput
    | Prisma.IntegrationCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.IntegrationCreateManyProjectInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutProjectInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationCreateWithoutUserInput = {
  id?: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutIntegrationsInput;
};

export type IntegrationUncheckedCreateWithoutUserInput = {
  id?: string;
  projectId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationCreateOrConnectWithoutUserInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutUserInput,
    Prisma.IntegrationUncheckedCreateWithoutUserInput
  >;
};

export type IntegrationCreateManyUserInputEnvelope = {
  data:
    | Prisma.IntegrationCreateManyUserInput
    | Prisma.IntegrationCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type IntegrationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutUserInput,
    Prisma.IntegrationUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutUserInput,
    Prisma.IntegrationUncheckedCreateWithoutUserInput
  >;
};

export type IntegrationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutUserInput,
    Prisma.IntegrationUncheckedUpdateWithoutUserInput
  >;
};

export type IntegrationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.IntegrationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyWithoutUserInput
  >;
};

export type IntegrationScalarWhereInput = {
  AND?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
  OR?: Prisma.IntegrationScalarWhereInput[];
  NOT?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
  id?: Prisma.StringFilter<"Integration"> | string;
  projectId?: Prisma.StringFilter<"Integration"> | string;
  userId?: Prisma.StringFilter<"Integration"> | string;
  name?: Prisma.StringFilter<"Integration"> | string;
  type?: Prisma.StringFilter<"Integration"> | string;
  config?: Prisma.JsonFilter<"Integration">;
  credentials?: Prisma.JsonFilter<"Integration">;
  isActive?: Prisma.BoolFilter<"Integration"> | boolean;
  lastSyncAt?:
    | Prisma.DateTimeNullableFilter<"Integration">
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFilter<"Integration"> | string;
  errorMessage?: Prisma.StringNullableFilter<"Integration"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Integration"> | Date | string;
};

export type IntegrationCreateWithoutProjectInput = {
  id?: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutIntegrationsInput;
};

export type IntegrationUncheckedCreateWithoutProjectInput = {
  id?: string;
  userId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationCreateOrConnectWithoutProjectInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutProjectInput,
    Prisma.IntegrationUncheckedCreateWithoutProjectInput
  >;
};

export type IntegrationCreateManyProjectInputEnvelope = {
  data:
    | Prisma.IntegrationCreateManyProjectInput
    | Prisma.IntegrationCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type IntegrationUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutProjectInput,
    Prisma.IntegrationUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutProjectInput,
    Prisma.IntegrationUncheckedCreateWithoutProjectInput
  >;
};

export type IntegrationUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutProjectInput,
    Prisma.IntegrationUncheckedUpdateWithoutProjectInput
  >;
};

export type IntegrationUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.IntegrationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyWithoutProjectInput
  >;
};

export type IntegrationCreateManyUserInput = {
  id?: string;
  projectId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutIntegrationsNestedInput;
};

export type IntegrationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationCreateManyProjectInput = {
  id?: string;
  userId: string;
  name: string;
  type: string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: boolean;
  lastSyncAt?: Date | string | null;
  syncStatus?: string;
  errorMessage?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutIntegrationsNestedInput;
};

export type IntegrationUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  credentials?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  lastSyncAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  syncStatus?: Prisma.StringFieldUpdateOperationsInput | string;
  errorMessage?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    name?: boolean;
    type?: boolean;
    config?: boolean;
    credentials?: boolean;
    isActive?: boolean;
    lastSyncAt?: boolean;
    syncStatus?: boolean;
    errorMessage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["integration"]
>;

export type IntegrationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    name?: boolean;
    type?: boolean;
    config?: boolean;
    credentials?: boolean;
    isActive?: boolean;
    lastSyncAt?: boolean;
    syncStatus?: boolean;
    errorMessage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["integration"]
>;

export type IntegrationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    name?: boolean;
    type?: boolean;
    config?: boolean;
    credentials?: boolean;
    isActive?: boolean;
    lastSyncAt?: boolean;
    syncStatus?: boolean;
    errorMessage?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["integration"]
>;

export type IntegrationSelectScalar = {
  id?: boolean;
  projectId?: boolean;
  userId?: boolean;
  name?: boolean;
  type?: boolean;
  config?: boolean;
  credentials?: boolean;
  isActive?: boolean;
  lastSyncAt?: boolean;
  syncStatus?: boolean;
  errorMessage?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type IntegrationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "projectId"
  | "userId"
  | "name"
  | "type"
  | "config"
  | "credentials"
  | "isActive"
  | "lastSyncAt"
  | "syncStatus"
  | "errorMessage"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["integration"]
>;
export type IntegrationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type IntegrationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type IntegrationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $IntegrationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Integration";
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      projectId: string;
      userId: string;
      name: string;
      type: string;
      config: runtime.JsonValue;
      credentials: runtime.JsonValue;
      isActive: boolean;
      lastSyncAt: Date | null;
      syncStatus: string;
      errorMessage: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["integration"]
  >;
  composites: {};
};

export type IntegrationGetPayload<
  S extends boolean | null | undefined | IntegrationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$IntegrationPayload, S>;

export type IntegrationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  IntegrationFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: IntegrationCountAggregateInputType | true;
};

export interface IntegrationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Integration"];
    meta: { name: "Integration" };
  };
  /**
   * Find zero or one Integration that matches the filter.
   * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IntegrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, IntegrationFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Integration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, IntegrationFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Integration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IntegrationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Integration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Integrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Integrations
   * const integrations = await prisma.integration.findMany()
   *
   * // Get first 10 Integrations
   * const integrations = await prisma.integration.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
   *
   */
  findMany<T extends IntegrationFindManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Integration.
   * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
   * @example
   * // Create one Integration
   * const Integration = await prisma.integration.create({
   *   data: {
   *     // ... data to create a Integration
   *   }
   * })
   *
   */
  create<T extends IntegrationCreateArgs>(
    args: Prisma.SelectSubset<T, IntegrationCreateArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Integrations.
   * @param {IntegrationCreateManyArgs} args - Arguments to create many Integrations.
   * @example
   * // Create many Integrations
   * const integration = await prisma.integration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends IntegrationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Integrations and returns the data saved in the database.
   * @param {IntegrationCreateManyAndReturnArgs} args - Arguments to create many Integrations.
   * @example
   * // Create many Integrations
   * const integration = await prisma.integration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Integrations and only return the `id`
   * const integrationWithIdOnly = await prisma.integration.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends IntegrationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, IntegrationCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Integration.
   * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
   * @example
   * // Delete one Integration
   * const Integration = await prisma.integration.delete({
   *   where: {
   *     // ... filter to delete one Integration
   *   }
   * })
   *
   */
  delete<T extends IntegrationDeleteArgs>(
    args: Prisma.SelectSubset<T, IntegrationDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Integration.
   * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
   * @example
   * // Update one Integration
   * const integration = await prisma.integration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends IntegrationUpdateArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Integrations.
   * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
   * @example
   * // Delete a few Integrations
   * const { count } = await prisma.integration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends IntegrationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Integrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Integrations
   * const integration = await prisma.integration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends IntegrationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Integrations and returns the data updated in the database.
   * @param {IntegrationUpdateManyAndReturnArgs} args - Arguments to update many Integrations.
   * @example
   * // Update many Integrations
   * const integration = await prisma.integration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Integrations and only return the `id`
   * const integrationWithIdOnly = await prisma.integration.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends IntegrationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Integration.
   * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
   * @example
   * // Update or create a Integration
   * const integration = await prisma.integration.upsert({
   *   create: {
   *     // ... data to create a Integration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Integration we want to update
   *   }
   * })
   */
  upsert<T extends IntegrationUpsertArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Integrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
   * @example
   * // Count the number of Integrations
   * const count = await prisma.integration.count({
   *   where: {
   *     // ... the filter for the Integrations we want to count
   *   }
   * })
   **/
  count<T extends IntegrationCountArgs>(
    args?: Prisma.Subset<T, IntegrationCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], IntegrationCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Integration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends IntegrationAggregateArgs>(
    args: Prisma.Subset<T, IntegrationAggregateArgs>
  ): Prisma.PrismaPromise<GetIntegrationAggregateType<T>>;

  /**
   * Group by Integration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends IntegrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IntegrationGroupByArgs["orderBy"] }
      : { orderBy?: IntegrationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetIntegrationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Integration model
   */
  readonly fields: IntegrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Integration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IntegrationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Integration model
 */
export interface IntegrationFieldRefs {
  readonly id: Prisma.FieldRef<"Integration", "String">;
  readonly projectId: Prisma.FieldRef<"Integration", "String">;
  readonly userId: Prisma.FieldRef<"Integration", "String">;
  readonly name: Prisma.FieldRef<"Integration", "String">;
  readonly type: Prisma.FieldRef<"Integration", "String">;
  readonly config: Prisma.FieldRef<"Integration", "Json">;
  readonly credentials: Prisma.FieldRef<"Integration", "Json">;
  readonly isActive: Prisma.FieldRef<"Integration", "Boolean">;
  readonly lastSyncAt: Prisma.FieldRef<"Integration", "DateTime">;
  readonly syncStatus: Prisma.FieldRef<"Integration", "String">;
  readonly errorMessage: Prisma.FieldRef<"Integration", "String">;
  readonly createdAt: Prisma.FieldRef<"Integration", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Integration", "DateTime">;
}

// Custom InputTypes
/**
 * Integration findUnique
 */
export type IntegrationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration findUniqueOrThrow
 */
export type IntegrationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration findFirst
 */
export type IntegrationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Integrations.
   */
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration findFirstOrThrow
 */
export type IntegrationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Integrations.
   */
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration findMany
 */
export type IntegrationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integrations to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration create
 */
export type IntegrationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The data needed to create a Integration.
   */
  data: Prisma.XOR<
    Prisma.IntegrationCreateInput,
    Prisma.IntegrationUncheckedCreateInput
  >;
};

/**
 * Integration createMany
 */
export type IntegrationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Integrations.
   */
  data: Prisma.IntegrationCreateManyInput | Prisma.IntegrationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Integration createManyAndReturn
 */
export type IntegrationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * The data used to create many Integrations.
   */
  data: Prisma.IntegrationCreateManyInput | Prisma.IntegrationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Integration update
 */
export type IntegrationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The data needed to update a Integration.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateInput,
    Prisma.IntegrationUncheckedUpdateInput
  >;
  /**
   * Choose, which Integration to update.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration updateMany
 */
export type IntegrationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Integrations.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Integrations to update
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to update.
   */
  limit?: number;
};

/**
 * Integration updateManyAndReturn
 */
export type IntegrationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * The data used to update Integrations.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Integrations to update
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Integration upsert
 */
export type IntegrationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The filter to search for the Integration to update in case it exists.
   */
  where: Prisma.IntegrationWhereUniqueInput;
  /**
   * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
   */
  create: Prisma.XOR<
    Prisma.IntegrationCreateInput,
    Prisma.IntegrationUncheckedCreateInput
  >;
  /**
   * In case the Integration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.IntegrationUpdateInput,
    Prisma.IntegrationUncheckedUpdateInput
  >;
};

/**
 * Integration delete
 */
export type IntegrationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter which Integration to delete.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration deleteMany
 */
export type IntegrationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Integrations to delete
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to delete.
   */
  limit?: number;
};

/**
 * Integration without action
 */
export type IntegrationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
};
