/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ProjectMember` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ProjectMember
 *
 */
export type ProjectMemberModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ProjectMemberPayload>;

export type AggregateProjectMember = {
  _count: ProjectMemberCountAggregateOutputType | null;
  _min: ProjectMemberMinAggregateOutputType | null;
  _max: ProjectMemberMaxAggregateOutputType | null;
};

export type ProjectMemberMinAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  userId: string | null;
  role: string | null;
  invitedBy: string | null;
  invitedAt: Date | null;
  joinedAt: Date | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProjectMemberMaxAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  userId: string | null;
  role: string | null;
  invitedBy: string | null;
  invitedAt: Date | null;
  joinedAt: Date | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProjectMemberCountAggregateOutputType = {
  id: number;
  projectId: number;
  userId: number;
  role: number;
  permissions: number;
  invitedBy: number;
  invitedAt: number;
  joinedAt: number;
  isActive: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type ProjectMemberMinAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  role?: true;
  invitedBy?: true;
  invitedAt?: true;
  joinedAt?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProjectMemberMaxAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  role?: true;
  invitedBy?: true;
  invitedAt?: true;
  joinedAt?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProjectMemberCountAggregateInputType = {
  id?: true;
  projectId?: true;
  userId?: true;
  role?: true;
  permissions?: true;
  invitedBy?: true;
  invitedAt?: true;
  joinedAt?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type ProjectMemberAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ProjectMember to aggregate.
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProjectMembers to fetch.
   */
  orderBy?:
    | Prisma.ProjectMemberOrderByWithRelationInput
    | Prisma.ProjectMemberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ProjectMemberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProjectMembers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProjectMembers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ProjectMembers
   **/
  _count?: true | ProjectMemberCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ProjectMemberMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ProjectMemberMaxAggregateInputType;
};

export type GetProjectMemberAggregateType<
  T extends ProjectMemberAggregateArgs,
> = {
  [P in keyof T & keyof AggregateProjectMember]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectMember[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectMember[P]>;
};

export type ProjectMemberGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ProjectMemberWhereInput;
  orderBy?:
    | Prisma.ProjectMemberOrderByWithAggregationInput
    | Prisma.ProjectMemberOrderByWithAggregationInput[];
  by:
    | Prisma.ProjectMemberScalarFieldEnum[]
    | Prisma.ProjectMemberScalarFieldEnum;
  having?: Prisma.ProjectMemberScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ProjectMemberCountAggregateInputType | true;
  _min?: ProjectMemberMinAggregateInputType;
  _max?: ProjectMemberMaxAggregateInputType;
};

export type ProjectMemberGroupByOutputType = {
  id: string;
  projectId: string;
  userId: string;
  role: string;
  permissions: runtime.JsonValue;
  invitedBy: string | null;
  invitedAt: Date | null;
  joinedAt: Date;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: ProjectMemberCountAggregateOutputType | null;
  _min: ProjectMemberMinAggregateOutputType | null;
  _max: ProjectMemberMaxAggregateOutputType | null;
};

type GetProjectMemberGroupByPayload<T extends ProjectMemberGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ProjectMemberGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof ProjectMemberGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>;
      }
    >
  >;

export type ProjectMemberWhereInput = {
  AND?: Prisma.ProjectMemberWhereInput | Prisma.ProjectMemberWhereInput[];
  OR?: Prisma.ProjectMemberWhereInput[];
  NOT?: Prisma.ProjectMemberWhereInput | Prisma.ProjectMemberWhereInput[];
  id?: Prisma.StringFilter<"ProjectMember"> | string;
  projectId?: Prisma.StringFilter<"ProjectMember"> | string;
  userId?: Prisma.StringFilter<"ProjectMember"> | string;
  role?: Prisma.StringFilter<"ProjectMember"> | string;
  permissions?: Prisma.JsonFilter<"ProjectMember">;
  invitedBy?: Prisma.StringNullableFilter<"ProjectMember"> | string | null;
  invitedAt?:
    | Prisma.DateTimeNullableFilter<"ProjectMember">
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
  isActive?: Prisma.BoolFilter<"ProjectMember"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
  inviter?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type ProjectMemberOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  invitedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  invitedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  joinedAt?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  inviter?: Prisma.UserOrderByWithRelationInput;
  project?: Prisma.ProjectOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type ProjectMemberWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    projectId_userId?: Prisma.ProjectMemberProjectIdUserIdCompoundUniqueInput;
    AND?: Prisma.ProjectMemberWhereInput | Prisma.ProjectMemberWhereInput[];
    OR?: Prisma.ProjectMemberWhereInput[];
    NOT?: Prisma.ProjectMemberWhereInput | Prisma.ProjectMemberWhereInput[];
    projectId?: Prisma.StringFilter<"ProjectMember"> | string;
    userId?: Prisma.StringFilter<"ProjectMember"> | string;
    role?: Prisma.StringFilter<"ProjectMember"> | string;
    permissions?: Prisma.JsonFilter<"ProjectMember">;
    invitedBy?: Prisma.StringNullableFilter<"ProjectMember"> | string | null;
    invitedAt?:
      | Prisma.DateTimeNullableFilter<"ProjectMember">
      | Date
      | string
      | null;
    joinedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
    isActive?: Prisma.BoolFilter<"ProjectMember"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
    inviter?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id" | "projectId_userId"
>;

export type ProjectMemberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  invitedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  invitedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  joinedAt?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.ProjectMemberCountOrderByAggregateInput;
  _max?: Prisma.ProjectMemberMaxOrderByAggregateInput;
  _min?: Prisma.ProjectMemberMinOrderByAggregateInput;
};

export type ProjectMemberScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ProjectMemberScalarWhereWithAggregatesInput
    | Prisma.ProjectMemberScalarWhereWithAggregatesInput[];
  OR?: Prisma.ProjectMemberScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ProjectMemberScalarWhereWithAggregatesInput
    | Prisma.ProjectMemberScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ProjectMember"> | string;
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectMember"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"ProjectMember"> | string;
  role?: Prisma.StringWithAggregatesFilter<"ProjectMember"> | string;
  permissions?: Prisma.JsonWithAggregatesFilter<"ProjectMember">;
  invitedBy?:
    | Prisma.StringNullableWithAggregatesFilter<"ProjectMember">
    | string
    | null;
  invitedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"ProjectMember">
    | Date
    | string
    | null;
  joinedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ProjectMember">
    | Date
    | string;
  isActive?: Prisma.BoolWithAggregatesFilter<"ProjectMember"> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ProjectMember">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"ProjectMember">
    | Date
    | string;
};

export type ProjectMemberCreateInput = {
  id?: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  inviter?: Prisma.UserCreateNestedOneWithoutInvitedProjectMembersInput;
  project: Prisma.ProjectCreateNestedOneWithoutProjectMembersInput;
  user: Prisma.UserCreateNestedOneWithoutProjectMembersInput;
};

export type ProjectMemberUncheckedCreateInput = {
  id?: string;
  projectId: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  inviter?: Prisma.UserUpdateOneWithoutInvitedProjectMembersNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutProjectMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutProjectMembersNestedInput;
};

export type ProjectMemberUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberCreateManyInput = {
  id?: string;
  projectId: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberListRelationFilter = {
  every?: Prisma.ProjectMemberWhereInput;
  some?: Prisma.ProjectMemberWhereInput;
  none?: Prisma.ProjectMemberWhereInput;
};

export type ProjectMemberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ProjectMemberProjectIdUserIdCompoundUniqueInput = {
  projectId: string;
  userId: string;
};

export type ProjectMemberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  permissions?: Prisma.SortOrder;
  invitedBy?: Prisma.SortOrder;
  invitedAt?: Prisma.SortOrder;
  joinedAt?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProjectMemberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  invitedBy?: Prisma.SortOrder;
  invitedAt?: Prisma.SortOrder;
  joinedAt?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProjectMemberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  invitedBy?: Prisma.SortOrder;
  invitedAt?: Prisma.SortOrder;
  joinedAt?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProjectMemberCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutUserInput,
        Prisma.ProjectMemberUncheckedCreateWithoutUserInput
      >
    | Prisma.ProjectMemberCreateWithoutUserInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ProjectMemberCreateManyUserInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberCreateNestedManyWithoutInviterInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutInviterInput,
        Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
      >
    | Prisma.ProjectMemberCreateWithoutInviterInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutInviterInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput[];
  createMany?: Prisma.ProjectMemberCreateManyInviterInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutUserInput,
        Prisma.ProjectMemberUncheckedCreateWithoutUserInput
      >
    | Prisma.ProjectMemberCreateWithoutUserInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ProjectMemberCreateManyUserInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberUncheckedCreateNestedManyWithoutInviterInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutInviterInput,
        Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
      >
    | Prisma.ProjectMemberCreateWithoutInviterInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutInviterInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput[];
  createMany?: Prisma.ProjectMemberCreateManyInviterInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutUserInput,
        Prisma.ProjectMemberUncheckedCreateWithoutUserInput
      >
    | Prisma.ProjectMemberCreateWithoutUserInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ProjectMemberCreateManyUserInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutUserInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberUpdateManyWithoutInviterNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutInviterInput,
        Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
      >
    | Prisma.ProjectMemberCreateWithoutInviterInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutInviterInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutInviterInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutInviterInput[];
  createMany?: Prisma.ProjectMemberCreateManyInviterInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutInviterInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutInviterInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutInviterInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutInviterInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutUserInput,
        Prisma.ProjectMemberUncheckedCreateWithoutUserInput
      >
    | Prisma.ProjectMemberCreateWithoutUserInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput
    | Prisma.ProjectMemberCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ProjectMemberCreateManyUserInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutUserInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberUncheckedUpdateManyWithoutInviterNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutInviterInput,
        Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
      >
    | Prisma.ProjectMemberCreateWithoutInviterInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutInviterInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput
    | Prisma.ProjectMemberCreateOrConnectWithoutInviterInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutInviterInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutInviterInput[];
  createMany?: Prisma.ProjectMemberCreateManyInviterInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutInviterInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutInviterInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutInviterInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutInviterInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutProjectInput,
        Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
      >
    | Prisma.ProjectMemberCreateWithoutProjectInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.ProjectMemberCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutProjectInput,
        Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
      >
    | Prisma.ProjectMemberCreateWithoutProjectInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.ProjectMemberCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
};

export type ProjectMemberUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutProjectInput,
        Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
      >
    | Prisma.ProjectMemberCreateWithoutProjectInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.ProjectMemberCreateManyProjectInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutProjectInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProjectMemberCreateWithoutProjectInput,
        Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
      >
    | Prisma.ProjectMemberCreateWithoutProjectInput[]
    | Prisma.ProjectMemberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput
    | Prisma.ProjectMemberCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.ProjectMemberCreateManyProjectInputEnvelope;
  set?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  disconnect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  delete?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  connect?:
    | Prisma.ProjectMemberWhereUniqueInput
    | Prisma.ProjectMemberWhereUniqueInput[];
  update?:
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutProjectInput
    | Prisma.ProjectMemberUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
};

export type ProjectMemberCreateWithoutUserInput = {
  id?: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  inviter?: Prisma.UserCreateNestedOneWithoutInvitedProjectMembersInput;
  project: Prisma.ProjectCreateNestedOneWithoutProjectMembersInput;
};

export type ProjectMemberUncheckedCreateWithoutUserInput = {
  id?: string;
  projectId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberCreateOrConnectWithoutUserInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutUserInput,
    Prisma.ProjectMemberUncheckedCreateWithoutUserInput
  >;
};

export type ProjectMemberCreateManyUserInputEnvelope = {
  data:
    | Prisma.ProjectMemberCreateManyUserInput
    | Prisma.ProjectMemberCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ProjectMemberCreateWithoutInviterInput = {
  id?: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutProjectMembersInput;
  user: Prisma.UserCreateNestedOneWithoutProjectMembersInput;
};

export type ProjectMemberUncheckedCreateWithoutInviterInput = {
  id?: string;
  projectId: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberCreateOrConnectWithoutInviterInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutInviterInput,
    Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
  >;
};

export type ProjectMemberCreateManyInviterInputEnvelope = {
  data:
    | Prisma.ProjectMemberCreateManyInviterInput
    | Prisma.ProjectMemberCreateManyInviterInput[];
  skipDuplicates?: boolean;
};

export type ProjectMemberUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutUserInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutUserInput,
    Prisma.ProjectMemberUncheckedCreateWithoutUserInput
  >;
};

export type ProjectMemberUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutUserInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutUserInput
  >;
};

export type ProjectMemberUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProjectMemberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateManyMutationInput,
    Prisma.ProjectMemberUncheckedUpdateManyWithoutUserInput
  >;
};

export type ProjectMemberScalarWhereInput = {
  AND?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
  OR?: Prisma.ProjectMemberScalarWhereInput[];
  NOT?:
    | Prisma.ProjectMemberScalarWhereInput
    | Prisma.ProjectMemberScalarWhereInput[];
  id?: Prisma.StringFilter<"ProjectMember"> | string;
  projectId?: Prisma.StringFilter<"ProjectMember"> | string;
  userId?: Prisma.StringFilter<"ProjectMember"> | string;
  role?: Prisma.StringFilter<"ProjectMember"> | string;
  permissions?: Prisma.JsonFilter<"ProjectMember">;
  invitedBy?: Prisma.StringNullableFilter<"ProjectMember"> | string | null;
  invitedAt?:
    | Prisma.DateTimeNullableFilter<"ProjectMember">
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
  isActive?: Prisma.BoolFilter<"ProjectMember"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"ProjectMember"> | Date | string;
};

export type ProjectMemberUpsertWithWhereUniqueWithoutInviterInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutInviterInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutInviterInput
  >;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutInviterInput,
    Prisma.ProjectMemberUncheckedCreateWithoutInviterInput
  >;
};

export type ProjectMemberUpdateWithWhereUniqueWithoutInviterInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutInviterInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutInviterInput
  >;
};

export type ProjectMemberUpdateManyWithWhereWithoutInviterInput = {
  where: Prisma.ProjectMemberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateManyMutationInput,
    Prisma.ProjectMemberUncheckedUpdateManyWithoutInviterInput
  >;
};

export type ProjectMemberCreateWithoutProjectInput = {
  id?: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  inviter?: Prisma.UserCreateNestedOneWithoutInvitedProjectMembersInput;
  user: Prisma.UserCreateNestedOneWithoutProjectMembersInput;
};

export type ProjectMemberUncheckedCreateWithoutProjectInput = {
  id?: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutProjectInput,
    Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
  >;
};

export type ProjectMemberCreateManyProjectInputEnvelope = {
  data:
    | Prisma.ProjectMemberCreateManyProjectInput
    | Prisma.ProjectMemberCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type ProjectMemberUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutProjectInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateWithoutProjectInput,
    Prisma.ProjectMemberUncheckedCreateWithoutProjectInput
  >;
};

export type ProjectMemberUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectMemberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateWithoutProjectInput,
    Prisma.ProjectMemberUncheckedUpdateWithoutProjectInput
  >;
};

export type ProjectMemberUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectMemberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateManyMutationInput,
    Prisma.ProjectMemberUncheckedUpdateManyWithoutProjectInput
  >;
};

export type ProjectMemberCreateManyUserInput = {
  id?: string;
  projectId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberCreateManyInviterInput = {
  id?: string;
  projectId: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  inviter?: Prisma.UserUpdateOneWithoutInvitedProjectMembersNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutProjectMembersNestedInput;
};

export type ProjectMemberUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberUpdateWithoutInviterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutProjectMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutProjectMembersNestedInput;
};

export type ProjectMemberUncheckedUpdateWithoutInviterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberUncheckedUpdateManyWithoutInviterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberCreateManyProjectInput = {
  id?: string;
  userId: string;
  role?: string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: string | null;
  invitedAt?: Date | string | null;
  joinedAt?: Date | string;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProjectMemberUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  inviter?: Prisma.UserUpdateOneWithoutInvitedProjectMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutProjectMembersNestedInput;
};

export type ProjectMemberUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  permissions?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  invitedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  invitedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectMemberSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    role?: boolean;
    permissions?: boolean;
    invitedBy?: boolean;
    invitedAt?: boolean;
    joinedAt?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["projectMember"]
>;

export type ProjectMemberSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    role?: boolean;
    permissions?: boolean;
    invitedBy?: boolean;
    invitedAt?: boolean;
    joinedAt?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["projectMember"]
>;

export type ProjectMemberSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    userId?: boolean;
    role?: boolean;
    permissions?: boolean;
    invitedBy?: boolean;
    invitedAt?: boolean;
    joinedAt?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["projectMember"]
>;

export type ProjectMemberSelectScalar = {
  id?: boolean;
  projectId?: boolean;
  userId?: boolean;
  role?: boolean;
  permissions?: boolean;
  invitedBy?: boolean;
  invitedAt?: boolean;
  joinedAt?: boolean;
  isActive?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type ProjectMemberOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "projectId"
  | "userId"
  | "role"
  | "permissions"
  | "invitedBy"
  | "invitedAt"
  | "joinedAt"
  | "isActive"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["projectMember"]
>;
export type ProjectMemberInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ProjectMemberIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ProjectMemberIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  inviter?: boolean | Prisma.ProjectMember$inviterArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ProjectMemberPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "ProjectMember";
  objects: {
    inviter: Prisma.$UserPayload<ExtArgs> | null;
    project: Prisma.$ProjectPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      projectId: string;
      userId: string;
      role: string;
      permissions: runtime.JsonValue;
      invitedBy: string | null;
      invitedAt: Date | null;
      joinedAt: Date;
      isActive: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["projectMember"]
  >;
  composites: {};
};

export type ProjectMemberGetPayload<
  S extends boolean | null | undefined | ProjectMemberDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProjectMemberPayload, S>;

export type ProjectMemberCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ProjectMemberFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: ProjectMemberCountAggregateInputType | true;
};

export interface ProjectMemberDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ProjectMember"];
    meta: { name: "ProjectMember" };
  };
  /**
   * Find zero or one ProjectMember that matches the filter.
   * @param {ProjectMemberFindUniqueArgs} args - Arguments to find a ProjectMember
   * @example
   * // Get one ProjectMember
   * const projectMember = await prisma.projectMember.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectMemberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ProjectMember that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectMemberFindUniqueOrThrowArgs} args - Arguments to find a ProjectMember
   * @example
   * // Get one ProjectMember
   * const projectMember = await prisma.projectMember.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectMemberFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ProjectMember that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberFindFirstArgs} args - Arguments to find a ProjectMember
   * @example
   * // Get one ProjectMember
   * const projectMember = await prisma.projectMember.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectMemberFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ProjectMember that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberFindFirstOrThrowArgs} args - Arguments to find a ProjectMember
   * @example
   * // Get one ProjectMember
   * const projectMember = await prisma.projectMember.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectMemberFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ProjectMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectMembers
   * const projectMembers = await prisma.projectMember.findMany()
   *
   * // Get first 10 ProjectMembers
   * const projectMembers = await prisma.projectMember.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const projectMemberWithIdOnly = await prisma.projectMember.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ProjectMemberFindManyArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ProjectMember.
   * @param {ProjectMemberCreateArgs} args - Arguments to create a ProjectMember.
   * @example
   * // Create one ProjectMember
   * const ProjectMember = await prisma.projectMember.create({
   *   data: {
   *     // ... data to create a ProjectMember
   *   }
   * })
   *
   */
  create<T extends ProjectMemberCreateArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ProjectMembers.
   * @param {ProjectMemberCreateManyArgs} args - Arguments to create many ProjectMembers.
   * @example
   * // Create many ProjectMembers
   * const projectMember = await prisma.projectMember.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ProjectMemberCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ProjectMembers and returns the data saved in the database.
   * @param {ProjectMemberCreateManyAndReturnArgs} args - Arguments to create many ProjectMembers.
   * @example
   * // Create many ProjectMembers
   * const projectMember = await prisma.projectMember.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ProjectMembers and only return the `id`
   * const projectMemberWithIdOnly = await prisma.projectMember.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ProjectMemberCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ProjectMember.
   * @param {ProjectMemberDeleteArgs} args - Arguments to delete one ProjectMember.
   * @example
   * // Delete one ProjectMember
   * const ProjectMember = await prisma.projectMember.delete({
   *   where: {
   *     // ... filter to delete one ProjectMember
   *   }
   * })
   *
   */
  delete<T extends ProjectMemberDeleteArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ProjectMember.
   * @param {ProjectMemberUpdateArgs} args - Arguments to update one ProjectMember.
   * @example
   * // Update one ProjectMember
   * const projectMember = await prisma.projectMember.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ProjectMemberUpdateArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ProjectMembers.
   * @param {ProjectMemberDeleteManyArgs} args - Arguments to filter ProjectMembers to delete.
   * @example
   * // Delete a few ProjectMembers
   * const { count } = await prisma.projectMember.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ProjectMemberDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ProjectMemberDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ProjectMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectMembers
   * const projectMember = await prisma.projectMember.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ProjectMemberUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ProjectMembers and returns the data updated in the database.
   * @param {ProjectMemberUpdateManyAndReturnArgs} args - Arguments to update many ProjectMembers.
   * @example
   * // Update many ProjectMembers
   * const projectMember = await prisma.projectMember.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ProjectMembers and only return the `id`
   * const projectMemberWithIdOnly = await prisma.projectMember.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ProjectMemberUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ProjectMember.
   * @param {ProjectMemberUpsertArgs} args - Arguments to update or create a ProjectMember.
   * @example
   * // Update or create a ProjectMember
   * const projectMember = await prisma.projectMember.upsert({
   *   create: {
   *     // ... data to create a ProjectMember
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectMember we want to update
   *   }
   * })
   */
  upsert<T extends ProjectMemberUpsertArgs>(
    args: Prisma.SelectSubset<T, ProjectMemberUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectMemberClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProjectMemberPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ProjectMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberCountArgs} args - Arguments to filter ProjectMembers to count.
   * @example
   * // Count the number of ProjectMembers
   * const count = await prisma.projectMember.count({
   *   where: {
   *     // ... the filter for the ProjectMembers we want to count
   *   }
   * })
   **/
  count<T extends ProjectMemberCountArgs>(
    args?: Prisma.Subset<T, ProjectMemberCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            ProjectMemberCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ProjectMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ProjectMemberAggregateArgs>(
    args: Prisma.Subset<T, ProjectMemberAggregateArgs>
  ): Prisma.PrismaPromise<GetProjectMemberAggregateType<T>>;

  /**
   * Group by ProjectMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectMemberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ProjectMemberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectMemberGroupByArgs["orderBy"] }
      : { orderBy?: ProjectMemberGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ProjectMemberGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetProjectMemberGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ProjectMember model
   */
  readonly fields: ProjectMemberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectMember.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectMemberClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  inviter<T extends Prisma.ProjectMember$inviterArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectMember$inviterArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ProjectMember model
 */
export interface ProjectMemberFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectMember", "String">;
  readonly projectId: Prisma.FieldRef<"ProjectMember", "String">;
  readonly userId: Prisma.FieldRef<"ProjectMember", "String">;
  readonly role: Prisma.FieldRef<"ProjectMember", "String">;
  readonly permissions: Prisma.FieldRef<"ProjectMember", "Json">;
  readonly invitedBy: Prisma.FieldRef<"ProjectMember", "String">;
  readonly invitedAt: Prisma.FieldRef<"ProjectMember", "DateTime">;
  readonly joinedAt: Prisma.FieldRef<"ProjectMember", "DateTime">;
  readonly isActive: Prisma.FieldRef<"ProjectMember", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"ProjectMember", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"ProjectMember", "DateTime">;
}

// Custom InputTypes
/**
 * ProjectMember findUnique
 */
export type ProjectMemberFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter, which ProjectMember to fetch.
   */
  where: Prisma.ProjectMemberWhereUniqueInput;
};

/**
 * ProjectMember findUniqueOrThrow
 */
export type ProjectMemberFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter, which ProjectMember to fetch.
   */
  where: Prisma.ProjectMemberWhereUniqueInput;
};

/**
 * ProjectMember findFirst
 */
export type ProjectMemberFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter, which ProjectMember to fetch.
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProjectMembers to fetch.
   */
  orderBy?:
    | Prisma.ProjectMemberOrderByWithRelationInput
    | Prisma.ProjectMemberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ProjectMembers.
   */
  cursor?: Prisma.ProjectMemberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProjectMembers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProjectMembers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ProjectMembers.
   */
  distinct?:
    | Prisma.ProjectMemberScalarFieldEnum
    | Prisma.ProjectMemberScalarFieldEnum[];
};

/**
 * ProjectMember findFirstOrThrow
 */
export type ProjectMemberFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter, which ProjectMember to fetch.
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProjectMembers to fetch.
   */
  orderBy?:
    | Prisma.ProjectMemberOrderByWithRelationInput
    | Prisma.ProjectMemberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ProjectMembers.
   */
  cursor?: Prisma.ProjectMemberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProjectMembers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProjectMembers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ProjectMembers.
   */
  distinct?:
    | Prisma.ProjectMemberScalarFieldEnum
    | Prisma.ProjectMemberScalarFieldEnum[];
};

/**
 * ProjectMember findMany
 */
export type ProjectMemberFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter, which ProjectMembers to fetch.
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ProjectMembers to fetch.
   */
  orderBy?:
    | Prisma.ProjectMemberOrderByWithRelationInput
    | Prisma.ProjectMemberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ProjectMembers.
   */
  cursor?: Prisma.ProjectMemberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ProjectMembers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ProjectMembers.
   */
  skip?: number;
  distinct?:
    | Prisma.ProjectMemberScalarFieldEnum
    | Prisma.ProjectMemberScalarFieldEnum[];
};

/**
 * ProjectMember create
 */
export type ProjectMemberCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * The data needed to create a ProjectMember.
   */
  data: Prisma.XOR<
    Prisma.ProjectMemberCreateInput,
    Prisma.ProjectMemberUncheckedCreateInput
  >;
};

/**
 * ProjectMember createMany
 */
export type ProjectMemberCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ProjectMembers.
   */
  data:
    | Prisma.ProjectMemberCreateManyInput
    | Prisma.ProjectMemberCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ProjectMember createManyAndReturn
 */
export type ProjectMemberCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * The data used to create many ProjectMembers.
   */
  data:
    | Prisma.ProjectMemberCreateManyInput
    | Prisma.ProjectMemberCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectMember update
 */
export type ProjectMemberUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * The data needed to update a ProjectMember.
   */
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateInput,
    Prisma.ProjectMemberUncheckedUpdateInput
  >;
  /**
   * Choose, which ProjectMember to update.
   */
  where: Prisma.ProjectMemberWhereUniqueInput;
};

/**
 * ProjectMember updateMany
 */
export type ProjectMemberUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ProjectMembers.
   */
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateManyMutationInput,
    Prisma.ProjectMemberUncheckedUpdateManyInput
  >;
  /**
   * Filter which ProjectMembers to update
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * Limit how many ProjectMembers to update.
   */
  limit?: number;
};

/**
 * ProjectMember updateManyAndReturn
 */
export type ProjectMemberUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * The data used to update ProjectMembers.
   */
  data: Prisma.XOR<
    Prisma.ProjectMemberUpdateManyMutationInput,
    Prisma.ProjectMemberUncheckedUpdateManyInput
  >;
  /**
   * Filter which ProjectMembers to update
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * Limit how many ProjectMembers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectMember upsert
 */
export type ProjectMemberUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * The filter to search for the ProjectMember to update in case it exists.
   */
  where: Prisma.ProjectMemberWhereUniqueInput;
  /**
   * In case the ProjectMember found by the `where` argument doesn't exist, create a new ProjectMember with this data.
   */
  create: Prisma.XOR<
    Prisma.ProjectMemberCreateInput,
    Prisma.ProjectMemberUncheckedCreateInput
  >;
  /**
   * In case the ProjectMember was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ProjectMemberUpdateInput,
    Prisma.ProjectMemberUncheckedUpdateInput
  >;
};

/**
 * ProjectMember delete
 */
export type ProjectMemberDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
  /**
   * Filter which ProjectMember to delete.
   */
  where: Prisma.ProjectMemberWhereUniqueInput;
};

/**
 * ProjectMember deleteMany
 */
export type ProjectMemberDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ProjectMembers to delete
   */
  where?: Prisma.ProjectMemberWhereInput;
  /**
   * Limit how many ProjectMembers to delete.
   */
  limit?: number;
};

/**
 * ProjectMember.inviter
 */
export type ProjectMember$inviterArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * ProjectMember without action
 */
export type ProjectMemberDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ProjectMember
   */
  select?: Prisma.ProjectMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ProjectMember
   */
  omit?: Prisma.ProjectMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectMemberInclude<ExtArgs> | null;
};
