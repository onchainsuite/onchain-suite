/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Subscriber` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Subscriber
 *
 */
export type SubscriberModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SubscriberPayload>;

export type AggregateSubscriber = {
  _count: SubscriberCountAggregateOutputType | null;
  _min: SubscriberMinAggregateOutputType | null;
  _max: SubscriberMaxAggregateOutputType | null;
};

export type SubscriberMinAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  campaignId: string | null;
  email: string | null;
  firstName: string | null;
  lastName: string | null;
  phone: string | null;
  status: string | null;
  source: string | null;
  optedInAt: Date | null;
  unsubscribedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type SubscriberMaxAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  campaignId: string | null;
  email: string | null;
  firstName: string | null;
  lastName: string | null;
  phone: string | null;
  status: string | null;
  source: string | null;
  optedInAt: Date | null;
  unsubscribedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type SubscriberCountAggregateOutputType = {
  id: number;
  projectId: number;
  campaignId: number;
  email: number;
  firstName: number;
  lastName: number;
  phone: number;
  status: number;
  tags: number;
  customFields: number;
  source: number;
  optedInAt: number;
  unsubscribedAt: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type SubscriberMinAggregateInputType = {
  id?: true;
  projectId?: true;
  campaignId?: true;
  email?: true;
  firstName?: true;
  lastName?: true;
  phone?: true;
  status?: true;
  source?: true;
  optedInAt?: true;
  unsubscribedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type SubscriberMaxAggregateInputType = {
  id?: true;
  projectId?: true;
  campaignId?: true;
  email?: true;
  firstName?: true;
  lastName?: true;
  phone?: true;
  status?: true;
  source?: true;
  optedInAt?: true;
  unsubscribedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type SubscriberCountAggregateInputType = {
  id?: true;
  projectId?: true;
  campaignId?: true;
  email?: true;
  firstName?: true;
  lastName?: true;
  phone?: true;
  status?: true;
  tags?: true;
  customFields?: true;
  source?: true;
  optedInAt?: true;
  unsubscribedAt?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type SubscriberAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Subscriber to aggregate.
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subscribers to fetch.
   */
  orderBy?:
    | Prisma.SubscriberOrderByWithRelationInput
    | Prisma.SubscriberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SubscriberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subscribers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Subscribers
   **/
  _count?: true | SubscriberCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SubscriberMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SubscriberMaxAggregateInputType;
};

export type GetSubscriberAggregateType<T extends SubscriberAggregateArgs> = {
  [P in keyof T & keyof AggregateSubscriber]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubscriber[P]>
    : Prisma.GetScalarType<T[P], AggregateSubscriber[P]>;
};

export type SubscriberGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SubscriberWhereInput;
  orderBy?:
    | Prisma.SubscriberOrderByWithAggregationInput
    | Prisma.SubscriberOrderByWithAggregationInput[];
  by: Prisma.SubscriberScalarFieldEnum[] | Prisma.SubscriberScalarFieldEnum;
  having?: Prisma.SubscriberScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SubscriberCountAggregateInputType | true;
  _min?: SubscriberMinAggregateInputType;
  _max?: SubscriberMaxAggregateInputType;
};

export type SubscriberGroupByOutputType = {
  id: string;
  projectId: string;
  campaignId: string | null;
  email: string;
  firstName: string | null;
  lastName: string | null;
  phone: string | null;
  status: string;
  tags: string[];
  customFields: runtime.JsonValue;
  source: string | null;
  optedInAt: Date;
  unsubscribedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  _count: SubscriberCountAggregateOutputType | null;
  _min: SubscriberMinAggregateOutputType | null;
  _max: SubscriberMaxAggregateOutputType | null;
};

type GetSubscriberGroupByPayload<T extends SubscriberGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<SubscriberGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SubscriberGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubscriberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubscriberGroupByOutputType[P]>;
      }
    >
  >;

export type SubscriberWhereInput = {
  AND?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[];
  OR?: Prisma.SubscriberWhereInput[];
  NOT?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[];
  id?: Prisma.StringFilter<"Subscriber"> | string;
  projectId?: Prisma.StringFilter<"Subscriber"> | string;
  campaignId?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  email?: Prisma.StringFilter<"Subscriber"> | string;
  firstName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  lastName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  phone?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  status?: Prisma.StringFilter<"Subscriber"> | string;
  tags?: Prisma.StringNullableListFilter<"Subscriber">;
  customFields?: Prisma.JsonFilter<"Subscriber">;
  source?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  optedInAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
  unsubscribedAt?:
    | Prisma.DateTimeNullableFilter<"Subscriber">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventListRelationFilter;
  campaign?: Prisma.XOR<
    Prisma.CampaignNullableScalarRelationFilter,
    Prisma.CampaignWhereInput
  > | null;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
};

export type SubscriberOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  campaignId?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrder;
  firstName?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder;
  phone?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  customFields?: Prisma.SortOrder;
  source?: Prisma.SortOrderInput | Prisma.SortOrder;
  optedInAt?: Prisma.SortOrder;
  unsubscribedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  analyticsEvents?: Prisma.AnalyticsEventOrderByRelationAggregateInput;
  campaign?: Prisma.CampaignOrderByWithRelationInput;
  project?: Prisma.ProjectOrderByWithRelationInput;
};

export type SubscriberWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    projectId_email?: Prisma.SubscriberProjectIdEmailCompoundUniqueInput;
    AND?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[];
    OR?: Prisma.SubscriberWhereInput[];
    NOT?: Prisma.SubscriberWhereInput | Prisma.SubscriberWhereInput[];
    projectId?: Prisma.StringFilter<"Subscriber"> | string;
    campaignId?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
    email?: Prisma.StringFilter<"Subscriber"> | string;
    firstName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
    lastName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
    phone?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
    status?: Prisma.StringFilter<"Subscriber"> | string;
    tags?: Prisma.StringNullableListFilter<"Subscriber">;
    customFields?: Prisma.JsonFilter<"Subscriber">;
    source?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
    optedInAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
    unsubscribedAt?:
      | Prisma.DateTimeNullableFilter<"Subscriber">
      | Date
      | string
      | null;
    createdAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
    analyticsEvents?: Prisma.AnalyticsEventListRelationFilter;
    campaign?: Prisma.XOR<
      Prisma.CampaignNullableScalarRelationFilter,
      Prisma.CampaignWhereInput
    > | null;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
  },
  "id" | "projectId_email"
>;

export type SubscriberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  campaignId?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrder;
  firstName?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder;
  phone?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  customFields?: Prisma.SortOrder;
  source?: Prisma.SortOrderInput | Prisma.SortOrder;
  optedInAt?: Prisma.SortOrder;
  unsubscribedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.SubscriberCountOrderByAggregateInput;
  _max?: Prisma.SubscriberMaxOrderByAggregateInput;
  _min?: Prisma.SubscriberMinOrderByAggregateInput;
};

export type SubscriberScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SubscriberScalarWhereWithAggregatesInput
    | Prisma.SubscriberScalarWhereWithAggregatesInput[];
  OR?: Prisma.SubscriberScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SubscriberScalarWhereWithAggregatesInput
    | Prisma.SubscriberScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Subscriber"> | string;
  projectId?: Prisma.StringWithAggregatesFilter<"Subscriber"> | string;
  campaignId?:
    | Prisma.StringNullableWithAggregatesFilter<"Subscriber">
    | string
    | null;
  email?: Prisma.StringWithAggregatesFilter<"Subscriber"> | string;
  firstName?:
    | Prisma.StringNullableWithAggregatesFilter<"Subscriber">
    | string
    | null;
  lastName?:
    | Prisma.StringNullableWithAggregatesFilter<"Subscriber">
    | string
    | null;
  phone?:
    | Prisma.StringNullableWithAggregatesFilter<"Subscriber">
    | string
    | null;
  status?: Prisma.StringWithAggregatesFilter<"Subscriber"> | string;
  tags?: Prisma.StringNullableListFilter<"Subscriber">;
  customFields?: Prisma.JsonWithAggregatesFilter<"Subscriber">;
  source?:
    | Prisma.StringNullableWithAggregatesFilter<"Subscriber">
    | string
    | null;
  optedInAt?: Prisma.DateTimeWithAggregatesFilter<"Subscriber"> | Date | string;
  unsubscribedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Subscriber">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Subscriber"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Subscriber"> | Date | string;
};

export type SubscriberCreateInput = {
  id?: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventCreateNestedManyWithoutSubscriberInput;
  campaign?: Prisma.CampaignCreateNestedOneWithoutSubscribersInput;
  project: Prisma.ProjectCreateNestedOneWithoutSubscribersInput;
};

export type SubscriberUncheckedCreateInput = {
  id?: string;
  projectId: string;
  campaignId?: string | null;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedCreateNestedManyWithoutSubscriberInput;
};

export type SubscriberUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUpdateManyWithoutSubscriberNestedInput;
  campaign?: Prisma.CampaignUpdateOneWithoutSubscribersNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutSubscribersNestedInput;
};

export type SubscriberUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  campaignId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedUpdateManyWithoutSubscriberNestedInput;
};

export type SubscriberCreateManyInput = {
  id?: string;
  projectId: string;
  campaignId?: string | null;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SubscriberUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SubscriberUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  campaignId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SubscriberListRelationFilter = {
  every?: Prisma.SubscriberWhereInput;
  some?: Prisma.SubscriberWhereInput;
  none?: Prisma.SubscriberWhereInput;
};

export type SubscriberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type SubscriberProjectIdEmailCompoundUniqueInput = {
  projectId: string;
  email: string;
};

export type SubscriberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  campaignId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  customFields?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  optedInAt?: Prisma.SortOrder;
  unsubscribedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SubscriberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  campaignId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  optedInAt?: Prisma.SortOrder;
  unsubscribedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SubscriberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  campaignId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  firstName?: Prisma.SortOrder;
  lastName?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  optedInAt?: Prisma.SortOrder;
  unsubscribedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SubscriberNullableScalarRelationFilter = {
  is?: Prisma.SubscriberWhereInput | null;
  isNot?: Prisma.SubscriberWhereInput | null;
};

export type SubscriberCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutProjectInput,
        Prisma.SubscriberUncheckedCreateWithoutProjectInput
      >
    | Prisma.SubscriberCreateWithoutProjectInput[]
    | Prisma.SubscriberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.SubscriberCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
};

export type SubscriberUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutProjectInput,
        Prisma.SubscriberUncheckedCreateWithoutProjectInput
      >
    | Prisma.SubscriberCreateWithoutProjectInput[]
    | Prisma.SubscriberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.SubscriberCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
};

export type SubscriberUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutProjectInput,
        Prisma.SubscriberUncheckedCreateWithoutProjectInput
      >
    | Prisma.SubscriberCreateWithoutProjectInput[]
    | Prisma.SubscriberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.SubscriberCreateManyProjectInputEnvelope;
  set?: Prisma.SubscriberWhereUniqueInput | Prisma.SubscriberWhereUniqueInput[];
  disconnect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  delete?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  update?:
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.SubscriberUpdateManyWithWhereWithoutProjectInput
    | Prisma.SubscriberUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.SubscriberScalarWhereInput
    | Prisma.SubscriberScalarWhereInput[];
};

export type SubscriberUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutProjectInput,
        Prisma.SubscriberUncheckedCreateWithoutProjectInput
      >
    | Prisma.SubscriberCreateWithoutProjectInput[]
    | Prisma.SubscriberUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput
    | Prisma.SubscriberCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.SubscriberCreateManyProjectInputEnvelope;
  set?: Prisma.SubscriberWhereUniqueInput | Prisma.SubscriberWhereUniqueInput[];
  disconnect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  delete?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  update?:
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.SubscriberUpdateManyWithWhereWithoutProjectInput
    | Prisma.SubscriberUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.SubscriberScalarWhereInput
    | Prisma.SubscriberScalarWhereInput[];
};

export type SubscriberCreateNestedManyWithoutCampaignInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutCampaignInput,
        Prisma.SubscriberUncheckedCreateWithoutCampaignInput
      >
    | Prisma.SubscriberCreateWithoutCampaignInput[]
    | Prisma.SubscriberUncheckedCreateWithoutCampaignInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput[];
  createMany?: Prisma.SubscriberCreateManyCampaignInputEnvelope;
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
};

export type SubscriberUncheckedCreateNestedManyWithoutCampaignInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutCampaignInput,
        Prisma.SubscriberUncheckedCreateWithoutCampaignInput
      >
    | Prisma.SubscriberCreateWithoutCampaignInput[]
    | Prisma.SubscriberUncheckedCreateWithoutCampaignInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput[];
  createMany?: Prisma.SubscriberCreateManyCampaignInputEnvelope;
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
};

export type SubscriberUpdateManyWithoutCampaignNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutCampaignInput,
        Prisma.SubscriberUncheckedCreateWithoutCampaignInput
      >
    | Prisma.SubscriberCreateWithoutCampaignInput[]
    | Prisma.SubscriberUncheckedCreateWithoutCampaignInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput[];
  upsert?:
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutCampaignInput
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutCampaignInput[];
  createMany?: Prisma.SubscriberCreateManyCampaignInputEnvelope;
  set?: Prisma.SubscriberWhereUniqueInput | Prisma.SubscriberWhereUniqueInput[];
  disconnect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  delete?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  update?:
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutCampaignInput
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutCampaignInput[];
  updateMany?:
    | Prisma.SubscriberUpdateManyWithWhereWithoutCampaignInput
    | Prisma.SubscriberUpdateManyWithWhereWithoutCampaignInput[];
  deleteMany?:
    | Prisma.SubscriberScalarWhereInput
    | Prisma.SubscriberScalarWhereInput[];
};

export type SubscriberUncheckedUpdateManyWithoutCampaignNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.SubscriberCreateWithoutCampaignInput,
        Prisma.SubscriberUncheckedCreateWithoutCampaignInput
      >
    | Prisma.SubscriberCreateWithoutCampaignInput[]
    | Prisma.SubscriberUncheckedCreateWithoutCampaignInput[];
  connectOrCreate?:
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput
    | Prisma.SubscriberCreateOrConnectWithoutCampaignInput[];
  upsert?:
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutCampaignInput
    | Prisma.SubscriberUpsertWithWhereUniqueWithoutCampaignInput[];
  createMany?: Prisma.SubscriberCreateManyCampaignInputEnvelope;
  set?: Prisma.SubscriberWhereUniqueInput | Prisma.SubscriberWhereUniqueInput[];
  disconnect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  delete?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  connect?:
    | Prisma.SubscriberWhereUniqueInput
    | Prisma.SubscriberWhereUniqueInput[];
  update?:
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutCampaignInput
    | Prisma.SubscriberUpdateWithWhereUniqueWithoutCampaignInput[];
  updateMany?:
    | Prisma.SubscriberUpdateManyWithWhereWithoutCampaignInput
    | Prisma.SubscriberUpdateManyWithWhereWithoutCampaignInput[];
  deleteMany?:
    | Prisma.SubscriberScalarWhereInput
    | Prisma.SubscriberScalarWhereInput[];
};

export type SubscriberCreatetagsInput = {
  set: string[];
};

export type SubscriberUpdatetagsInput = {
  set?: string[];
  push?: string | string[];
};

export type SubscriberCreateNestedOneWithoutAnalyticsEventsInput = {
  create?: Prisma.XOR<
    Prisma.SubscriberCreateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedCreateWithoutAnalyticsEventsInput
  >;
  connectOrCreate?: Prisma.SubscriberCreateOrConnectWithoutAnalyticsEventsInput;
  connect?: Prisma.SubscriberWhereUniqueInput;
};

export type SubscriberUpdateOneWithoutAnalyticsEventsNestedInput = {
  create?: Prisma.XOR<
    Prisma.SubscriberCreateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedCreateWithoutAnalyticsEventsInput
  >;
  connectOrCreate?: Prisma.SubscriberCreateOrConnectWithoutAnalyticsEventsInput;
  upsert?: Prisma.SubscriberUpsertWithoutAnalyticsEventsInput;
  disconnect?: Prisma.SubscriberWhereInput | boolean;
  delete?: Prisma.SubscriberWhereInput | boolean;
  connect?: Prisma.SubscriberWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.SubscriberUpdateToOneWithWhereWithoutAnalyticsEventsInput,
      Prisma.SubscriberUpdateWithoutAnalyticsEventsInput
    >,
    Prisma.SubscriberUncheckedUpdateWithoutAnalyticsEventsInput
  >;
};

export type SubscriberCreateWithoutProjectInput = {
  id?: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventCreateNestedManyWithoutSubscriberInput;
  campaign?: Prisma.CampaignCreateNestedOneWithoutSubscribersInput;
};

export type SubscriberUncheckedCreateWithoutProjectInput = {
  id?: string;
  campaignId?: string | null;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedCreateNestedManyWithoutSubscriberInput;
};

export type SubscriberCreateOrConnectWithoutProjectInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutProjectInput,
    Prisma.SubscriberUncheckedCreateWithoutProjectInput
  >;
};

export type SubscriberCreateManyProjectInputEnvelope = {
  data:
    | Prisma.SubscriberCreateManyProjectInput
    | Prisma.SubscriberCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type SubscriberUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutProjectInput,
    Prisma.SubscriberUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutProjectInput,
    Prisma.SubscriberUncheckedCreateWithoutProjectInput
  >;
};

export type SubscriberUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutProjectInput,
    Prisma.SubscriberUncheckedUpdateWithoutProjectInput
  >;
};

export type SubscriberUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.SubscriberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubscriberUpdateManyMutationInput,
    Prisma.SubscriberUncheckedUpdateManyWithoutProjectInput
  >;
};

export type SubscriberScalarWhereInput = {
  AND?: Prisma.SubscriberScalarWhereInput | Prisma.SubscriberScalarWhereInput[];
  OR?: Prisma.SubscriberScalarWhereInput[];
  NOT?: Prisma.SubscriberScalarWhereInput | Prisma.SubscriberScalarWhereInput[];
  id?: Prisma.StringFilter<"Subscriber"> | string;
  projectId?: Prisma.StringFilter<"Subscriber"> | string;
  campaignId?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  email?: Prisma.StringFilter<"Subscriber"> | string;
  firstName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  lastName?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  phone?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  status?: Prisma.StringFilter<"Subscriber"> | string;
  tags?: Prisma.StringNullableListFilter<"Subscriber">;
  customFields?: Prisma.JsonFilter<"Subscriber">;
  source?: Prisma.StringNullableFilter<"Subscriber"> | string | null;
  optedInAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
  unsubscribedAt?:
    | Prisma.DateTimeNullableFilter<"Subscriber">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Subscriber"> | Date | string;
};

export type SubscriberCreateWithoutCampaignInput = {
  id?: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventCreateNestedManyWithoutSubscriberInput;
  project: Prisma.ProjectCreateNestedOneWithoutSubscribersInput;
};

export type SubscriberUncheckedCreateWithoutCampaignInput = {
  id?: string;
  projectId: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedCreateNestedManyWithoutSubscriberInput;
};

export type SubscriberCreateOrConnectWithoutCampaignInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutCampaignInput,
    Prisma.SubscriberUncheckedCreateWithoutCampaignInput
  >;
};

export type SubscriberCreateManyCampaignInputEnvelope = {
  data:
    | Prisma.SubscriberCreateManyCampaignInput
    | Prisma.SubscriberCreateManyCampaignInput[];
  skipDuplicates?: boolean;
};

export type SubscriberUpsertWithWhereUniqueWithoutCampaignInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutCampaignInput,
    Prisma.SubscriberUncheckedUpdateWithoutCampaignInput
  >;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutCampaignInput,
    Prisma.SubscriberUncheckedCreateWithoutCampaignInput
  >;
};

export type SubscriberUpdateWithWhereUniqueWithoutCampaignInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutCampaignInput,
    Prisma.SubscriberUncheckedUpdateWithoutCampaignInput
  >;
};

export type SubscriberUpdateManyWithWhereWithoutCampaignInput = {
  where: Prisma.SubscriberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.SubscriberUpdateManyMutationInput,
    Prisma.SubscriberUncheckedUpdateManyWithoutCampaignInput
  >;
};

export type SubscriberCreateWithoutAnalyticsEventsInput = {
  id?: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  campaign?: Prisma.CampaignCreateNestedOneWithoutSubscribersInput;
  project: Prisma.ProjectCreateNestedOneWithoutSubscribersInput;
};

export type SubscriberUncheckedCreateWithoutAnalyticsEventsInput = {
  id?: string;
  projectId: string;
  campaignId?: string | null;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SubscriberCreateOrConnectWithoutAnalyticsEventsInput = {
  where: Prisma.SubscriberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedCreateWithoutAnalyticsEventsInput
  >;
};

export type SubscriberUpsertWithoutAnalyticsEventsInput = {
  update: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedUpdateWithoutAnalyticsEventsInput
  >;
  create: Prisma.XOR<
    Prisma.SubscriberCreateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedCreateWithoutAnalyticsEventsInput
  >;
  where?: Prisma.SubscriberWhereInput;
};

export type SubscriberUpdateToOneWithWhereWithoutAnalyticsEventsInput = {
  where?: Prisma.SubscriberWhereInput;
  data: Prisma.XOR<
    Prisma.SubscriberUpdateWithoutAnalyticsEventsInput,
    Prisma.SubscriberUncheckedUpdateWithoutAnalyticsEventsInput
  >;
};

export type SubscriberUpdateWithoutAnalyticsEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  campaign?: Prisma.CampaignUpdateOneWithoutSubscribersNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutSubscribersNestedInput;
};

export type SubscriberUncheckedUpdateWithoutAnalyticsEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  campaignId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SubscriberCreateManyProjectInput = {
  id?: string;
  campaignId?: string | null;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SubscriberUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUpdateManyWithoutSubscriberNestedInput;
  campaign?: Prisma.CampaignUpdateOneWithoutSubscribersNestedInput;
};

export type SubscriberUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  campaignId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedUpdateManyWithoutSubscriberNestedInput;
};

export type SubscriberUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  campaignId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SubscriberCreateManyCampaignInput = {
  id?: string;
  projectId: string;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  status?: string;
  tags?: Prisma.SubscriberCreatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: string | null;
  optedInAt?: Date | string;
  unsubscribedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SubscriberUpdateWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUpdateManyWithoutSubscriberNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutSubscribersNestedInput;
};

export type SubscriberUncheckedUpdateWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  analyticsEvents?: Prisma.AnalyticsEventUncheckedUpdateManyWithoutSubscriberNestedInput;
};

export type SubscriberUncheckedUpdateManyWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  firstName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.SubscriberUpdatetagsInput | string[];
  customFields?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  optedInAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  unsubscribedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type SubscriberCountOutputType
 */

export type SubscriberCountOutputType = {
  analyticsEvents: number;
};

export type SubscriberCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  analyticsEvents?: boolean | SubscriberCountOutputTypeCountAnalyticsEventsArgs;
};

/**
 * SubscriberCountOutputType without action
 */
export type SubscriberCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the SubscriberCountOutputType
   */
  select?: Prisma.SubscriberCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SubscriberCountOutputType without action
 */
export type SubscriberCountOutputTypeCountAnalyticsEventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AnalyticsEventWhereInput;
};

export type SubscriberSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    campaignId?: boolean;
    email?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    phone?: boolean;
    status?: boolean;
    tags?: boolean;
    customFields?: boolean;
    source?: boolean;
    optedInAt?: boolean;
    unsubscribedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    analyticsEvents?: boolean | Prisma.Subscriber$analyticsEventsArgs<ExtArgs>;
    campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    _count?: boolean | Prisma.SubscriberCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subscriber"]
>;

export type SubscriberSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    campaignId?: boolean;
    email?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    phone?: boolean;
    status?: boolean;
    tags?: boolean;
    customFields?: boolean;
    source?: boolean;
    optedInAt?: boolean;
    unsubscribedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subscriber"]
>;

export type SubscriberSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    campaignId?: boolean;
    email?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    phone?: boolean;
    status?: boolean;
    tags?: boolean;
    customFields?: boolean;
    source?: boolean;
    optedInAt?: boolean;
    unsubscribedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["subscriber"]
>;

export type SubscriberSelectScalar = {
  id?: boolean;
  projectId?: boolean;
  campaignId?: boolean;
  email?: boolean;
  firstName?: boolean;
  lastName?: boolean;
  phone?: boolean;
  status?: boolean;
  tags?: boolean;
  customFields?: boolean;
  source?: boolean;
  optedInAt?: boolean;
  unsubscribedAt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type SubscriberOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "projectId"
  | "campaignId"
  | "email"
  | "firstName"
  | "lastName"
  | "phone"
  | "status"
  | "tags"
  | "customFields"
  | "source"
  | "optedInAt"
  | "unsubscribedAt"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["subscriber"]
>;
export type SubscriberInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  analyticsEvents?: boolean | Prisma.Subscriber$analyticsEventsArgs<ExtArgs>;
  campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  _count?: boolean | Prisma.SubscriberCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SubscriberIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};
export type SubscriberIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  campaign?: boolean | Prisma.Subscriber$campaignArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};

export type $SubscriberPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Subscriber";
  objects: {
    analyticsEvents: Prisma.$AnalyticsEventPayload<ExtArgs>[];
    campaign: Prisma.$CampaignPayload<ExtArgs> | null;
    project: Prisma.$ProjectPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      projectId: string;
      campaignId: string | null;
      email: string;
      firstName: string | null;
      lastName: string | null;
      phone: string | null;
      status: string;
      tags: string[];
      customFields: runtime.JsonValue;
      source: string | null;
      optedInAt: Date;
      unsubscribedAt: Date | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["subscriber"]
  >;
  composites: {};
};

export type SubscriberGetPayload<
  S extends boolean | null | undefined | SubscriberDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SubscriberPayload, S>;

export type SubscriberCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SubscriberFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SubscriberCountAggregateInputType | true;
};

export interface SubscriberDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Subscriber"];
    meta: { name: "Subscriber" };
  };
  /**
   * Find zero or one Subscriber that matches the filter.
   * @param {SubscriberFindUniqueArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubscriberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SubscriberFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Subscriber that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubscriberFindUniqueOrThrowArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubscriberFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SubscriberFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Subscriber that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindFirstArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubscriberFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SubscriberFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Subscriber that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindFirstOrThrowArgs} args - Arguments to find a Subscriber
   * @example
   * // Get one Subscriber
   * const subscriber = await prisma.subscriber.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubscriberFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SubscriberFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Subscribers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Subscribers
   * const subscribers = await prisma.subscriber.findMany()
   *
   * // Get first 10 Subscribers
   * const subscribers = await prisma.subscriber.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SubscriberFindManyArgs>(
    args?: Prisma.SelectSubset<T, SubscriberFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Subscriber.
   * @param {SubscriberCreateArgs} args - Arguments to create a Subscriber.
   * @example
   * // Create one Subscriber
   * const Subscriber = await prisma.subscriber.create({
   *   data: {
   *     // ... data to create a Subscriber
   *   }
   * })
   *
   */
  create<T extends SubscriberCreateArgs>(
    args: Prisma.SelectSubset<T, SubscriberCreateArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Subscribers.
   * @param {SubscriberCreateManyArgs} args - Arguments to create many Subscribers.
   * @example
   * // Create many Subscribers
   * const subscriber = await prisma.subscriber.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SubscriberCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SubscriberCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Subscribers and returns the data saved in the database.
   * @param {SubscriberCreateManyAndReturnArgs} args - Arguments to create many Subscribers.
   * @example
   * // Create many Subscribers
   * const subscriber = await prisma.subscriber.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Subscribers and only return the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SubscriberCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SubscriberCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Subscriber.
   * @param {SubscriberDeleteArgs} args - Arguments to delete one Subscriber.
   * @example
   * // Delete one Subscriber
   * const Subscriber = await prisma.subscriber.delete({
   *   where: {
   *     // ... filter to delete one Subscriber
   *   }
   * })
   *
   */
  delete<T extends SubscriberDeleteArgs>(
    args: Prisma.SelectSubset<T, SubscriberDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Subscriber.
   * @param {SubscriberUpdateArgs} args - Arguments to update one Subscriber.
   * @example
   * // Update one Subscriber
   * const subscriber = await prisma.subscriber.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SubscriberUpdateArgs>(
    args: Prisma.SelectSubset<T, SubscriberUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Subscribers.
   * @param {SubscriberDeleteManyArgs} args - Arguments to filter Subscribers to delete.
   * @example
   * // Delete a few Subscribers
   * const { count } = await prisma.subscriber.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SubscriberDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SubscriberDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Subscribers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Subscribers
   * const subscriber = await prisma.subscriber.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SubscriberUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SubscriberUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Subscribers and returns the data updated in the database.
   * @param {SubscriberUpdateManyAndReturnArgs} args - Arguments to update many Subscribers.
   * @example
   * // Update many Subscribers
   * const subscriber = await prisma.subscriber.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Subscribers and only return the `id`
   * const subscriberWithIdOnly = await prisma.subscriber.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SubscriberUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SubscriberUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Subscriber.
   * @param {SubscriberUpsertArgs} args - Arguments to update or create a Subscriber.
   * @example
   * // Update or create a Subscriber
   * const subscriber = await prisma.subscriber.upsert({
   *   create: {
   *     // ... data to create a Subscriber
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Subscriber we want to update
   *   }
   * })
   */
  upsert<T extends SubscriberUpsertArgs>(
    args: Prisma.SelectSubset<T, SubscriberUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__SubscriberClient<
    runtime.Types.Result.GetResult<
      Prisma.$SubscriberPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Subscribers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberCountArgs} args - Arguments to filter Subscribers to count.
   * @example
   * // Count the number of Subscribers
   * const count = await prisma.subscriber.count({
   *   where: {
   *     // ... the filter for the Subscribers we want to count
   *   }
   * })
   **/
  count<T extends SubscriberCountArgs>(
    args?: Prisma.Subset<T, SubscriberCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SubscriberCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Subscriber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SubscriberAggregateArgs>(
    args: Prisma.Subset<T, SubscriberAggregateArgs>
  ): Prisma.PrismaPromise<GetSubscriberAggregateType<T>>;

  /**
   * Group by Subscriber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SubscriberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubscriberGroupByArgs["orderBy"] }
      : { orderBy?: SubscriberGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SubscriberGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetSubscriberGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Subscriber model
   */
  readonly fields: SubscriberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Subscriber.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubscriberClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  analyticsEvents<
    T extends Prisma.Subscriber$analyticsEventsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.Subscriber$analyticsEventsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AnalyticsEventPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  campaign<T extends Prisma.Subscriber$campaignArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Subscriber$campaignArgs<ExtArgs>>
  ): Prisma.Prisma__CampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$CampaignPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Subscriber model
 */
export interface SubscriberFieldRefs {
  readonly id: Prisma.FieldRef<"Subscriber", "String">;
  readonly projectId: Prisma.FieldRef<"Subscriber", "String">;
  readonly campaignId: Prisma.FieldRef<"Subscriber", "String">;
  readonly email: Prisma.FieldRef<"Subscriber", "String">;
  readonly firstName: Prisma.FieldRef<"Subscriber", "String">;
  readonly lastName: Prisma.FieldRef<"Subscriber", "String">;
  readonly phone: Prisma.FieldRef<"Subscriber", "String">;
  readonly status: Prisma.FieldRef<"Subscriber", "String">;
  readonly tags: Prisma.FieldRef<"Subscriber", "String[]">;
  readonly customFields: Prisma.FieldRef<"Subscriber", "Json">;
  readonly source: Prisma.FieldRef<"Subscriber", "String">;
  readonly optedInAt: Prisma.FieldRef<"Subscriber", "DateTime">;
  readonly unsubscribedAt: Prisma.FieldRef<"Subscriber", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"Subscriber", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Subscriber", "DateTime">;
}

// Custom InputTypes
/**
 * Subscriber findUnique
 */
export type SubscriberFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter, which Subscriber to fetch.
   */
  where: Prisma.SubscriberWhereUniqueInput;
};

/**
 * Subscriber findUniqueOrThrow
 */
export type SubscriberFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter, which Subscriber to fetch.
   */
  where: Prisma.SubscriberWhereUniqueInput;
};

/**
 * Subscriber findFirst
 */
export type SubscriberFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter, which Subscriber to fetch.
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subscribers to fetch.
   */
  orderBy?:
    | Prisma.SubscriberOrderByWithRelationInput
    | Prisma.SubscriberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subscribers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Subscribers.
   */
  distinct?:
    | Prisma.SubscriberScalarFieldEnum
    | Prisma.SubscriberScalarFieldEnum[];
};

/**
 * Subscriber findFirstOrThrow
 */
export type SubscriberFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter, which Subscriber to fetch.
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subscribers to fetch.
   */
  orderBy?:
    | Prisma.SubscriberOrderByWithRelationInput
    | Prisma.SubscriberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subscribers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Subscribers.
   */
  distinct?:
    | Prisma.SubscriberScalarFieldEnum
    | Prisma.SubscriberScalarFieldEnum[];
};

/**
 * Subscriber findMany
 */
export type SubscriberFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter, which Subscribers to fetch.
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Subscribers to fetch.
   */
  orderBy?:
    | Prisma.SubscriberOrderByWithRelationInput
    | Prisma.SubscriberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Subscribers.
   */
  cursor?: Prisma.SubscriberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Subscribers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Subscribers.
   */
  skip?: number;
  distinct?:
    | Prisma.SubscriberScalarFieldEnum
    | Prisma.SubscriberScalarFieldEnum[];
};

/**
 * Subscriber create
 */
export type SubscriberCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * The data needed to create a Subscriber.
   */
  data: Prisma.XOR<
    Prisma.SubscriberCreateInput,
    Prisma.SubscriberUncheckedCreateInput
  >;
};

/**
 * Subscriber createMany
 */
export type SubscriberCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Subscribers.
   */
  data: Prisma.SubscriberCreateManyInput | Prisma.SubscriberCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Subscriber createManyAndReturn
 */
export type SubscriberCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * The data used to create many Subscribers.
   */
  data: Prisma.SubscriberCreateManyInput | Prisma.SubscriberCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Subscriber update
 */
export type SubscriberUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * The data needed to update a Subscriber.
   */
  data: Prisma.XOR<
    Prisma.SubscriberUpdateInput,
    Prisma.SubscriberUncheckedUpdateInput
  >;
  /**
   * Choose, which Subscriber to update.
   */
  where: Prisma.SubscriberWhereUniqueInput;
};

/**
 * Subscriber updateMany
 */
export type SubscriberUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Subscribers.
   */
  data: Prisma.XOR<
    Prisma.SubscriberUpdateManyMutationInput,
    Prisma.SubscriberUncheckedUpdateManyInput
  >;
  /**
   * Filter which Subscribers to update
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * Limit how many Subscribers to update.
   */
  limit?: number;
};

/**
 * Subscriber updateManyAndReturn
 */
export type SubscriberUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * The data used to update Subscribers.
   */
  data: Prisma.XOR<
    Prisma.SubscriberUpdateManyMutationInput,
    Prisma.SubscriberUncheckedUpdateManyInput
  >;
  /**
   * Filter which Subscribers to update
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * Limit how many Subscribers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Subscriber upsert
 */
export type SubscriberUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * The filter to search for the Subscriber to update in case it exists.
   */
  where: Prisma.SubscriberWhereUniqueInput;
  /**
   * In case the Subscriber found by the `where` argument doesn't exist, create a new Subscriber with this data.
   */
  create: Prisma.XOR<
    Prisma.SubscriberCreateInput,
    Prisma.SubscriberUncheckedCreateInput
  >;
  /**
   * In case the Subscriber was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.SubscriberUpdateInput,
    Prisma.SubscriberUncheckedUpdateInput
  >;
};

/**
 * Subscriber delete
 */
export type SubscriberDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
  /**
   * Filter which Subscriber to delete.
   */
  where: Prisma.SubscriberWhereUniqueInput;
};

/**
 * Subscriber deleteMany
 */
export type SubscriberDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Subscribers to delete
   */
  where?: Prisma.SubscriberWhereInput;
  /**
   * Limit how many Subscribers to delete.
   */
  limit?: number;
};

/**
 * Subscriber.analyticsEvents
 */
export type Subscriber$analyticsEventsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AnalyticsEvent
   */
  select?: Prisma.AnalyticsEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AnalyticsEvent
   */
  omit?: Prisma.AnalyticsEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnalyticsEventInclude<ExtArgs> | null;
  where?: Prisma.AnalyticsEventWhereInput;
  orderBy?:
    | Prisma.AnalyticsEventOrderByWithRelationInput
    | Prisma.AnalyticsEventOrderByWithRelationInput[];
  cursor?: Prisma.AnalyticsEventWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AnalyticsEventScalarFieldEnum
    | Prisma.AnalyticsEventScalarFieldEnum[];
};

/**
 * Subscriber.campaign
 */
export type Subscriber$campaignArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null;
  where?: Prisma.CampaignWhereInput;
};

/**
 * Subscriber without action
 */
export type SubscriberDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Subscriber
   */
  select?: Prisma.SubscriberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Subscriber
   */
  omit?: Prisma.SubscriberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriberInclude<ExtArgs> | null;
};
