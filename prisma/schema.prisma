// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client"
  output        = "./generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  name                    String?
  firstName               String?  @map("first_name")
  lastName                String?  @map("last_name")
  companyName             String?  @map("company_name")
  image                   String?
  role                    UserRole @default(USER)
  phone                   String?
  timezone                String   @default("UTC")
  emailVerified           Boolean  @default(false) @map("email_verified")
  onboardingCompleted     Boolean  @default(false) @map("onboarding_completed")
  notificationPreferences Json     @default("{}") @map("notification_preferences") @db.JsonB
  preferences             Json     @default("{}") @db.JsonB
  lastActiveAt            DateTime @default(now()) @map("last_active_at")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  sessions              Session[]
  accounts              Account[]
  organizationMembers   OrganizationMember[]
  projectMembers        ProjectMember[]
  onboardingProgress    OnboardingProgress?
  campaigns             Campaign[]
  automationFlows       AutomationFlow[]
  emailTemplates        EmailTemplate[]
  integrations          Integration[]
  notifications         Notification[]
  analyticsEvents       AnalyticsEvent[]
  invitedOrgMembers     OrganizationMember[] @relation("InvitedBy")
  invitedProjectMembers ProjectMember[]      @relation("InvitedBy")

  @@map("users")
}

model Session {
  id             String   @id @default(cuid())
  token          String   @unique
  projectId      String?  @map("project_id")
  expiresAt      DateTime @map("expires_at")
  userId         String   @map("user_id")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  lastActivityAt DateTime @default(now()) @map("last_activity_at")

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@unique([identifier, value])
  @@map("verifications")
}

model Organization {
  id                  String               @id @default(cuid())
  name                String
  slug                String               @unique
  description         String?
  logoUrl             String?              @map("logo_url")
  settings            Json                 @default("{}")
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organizationMembers OrganizationMember[]
  projects            Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String    @id @default(cuid())
  organizationId String    @map("organization_id")
  userId         String    @map("user_id")
  role           String    @default("member")
  permissions    Json      @default("{}") @db.JsonB
  invitedBy      String?   @map("invited_by")
  invitedAt      DateTime? @map("invited_at")
  joinedAt       DateTime  @default(now()) @map("joined_at")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Project {
  id              String           @id @default(cuid())
  organizationId  String?          @map("organization_id")
  name            String
  description     String?
  slug            String
  settings        Json             @default("{}")
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  automationFlows AutomationFlow[]
  emailTemplates  EmailTemplate[]
  integrations    Integration[]
  notifications   Notification[]
  analyticsEvents AnalyticsEvent[]
  sessions        Session[]
  organization    Organization?    @relation(fields: [organizationId], references: [id])
  projectMembers  ProjectMember[]
  campaigns       Campaign[]
  subscribers     Subscriber[]

  @@unique([organizationId, slug])
  @@map("projects")
}

model ProjectMember {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  userId      String    @map("user_id")
  role        String    @default("member")
  permissions Json      @default("{}")
  invitedBy   String?   @map("invited_by")
  invitedAt   DateTime? @map("invited_at") @db.Timestamptz(6)
  joinedAt    DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  inviter     User?     @relation("InvitedBy", fields: [invitedBy], references: [id])
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model OnboardingProgress {
  id                   String              @id @default(cuid())
  userId               String              @unique @map("user_id")
  currentStep          String              @default("welcome") @map("current_step")
  completedSteps       String[]            @default([]) @map("completed_steps")
  totalSteps           Int                 @default(5) @map("total_steps")
  completionPercentage Decimal             @default(0.00) @map("completion_percentage") @db.Decimal(5, 2)
  isCompleted          Boolean             @default(false) @map("is_completed")
  startedAt            DateTime            @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt          DateTime?           @map("completed_at") @db.Timestamptz(6)
  lastActivityAt       DateTime            @default(now()) @map("last_activity_at") @db.Timestamptz(6)
  stepData             Json                @default("{}") @map("step_data")
  timeSpentSeconds     Int                 @default(0) @map("time_spent_seconds")
  sessionCount         Int                 @default(1) @map("session_count")
  abandonedAt          DateTime?           @map("abandoned_at") @db.Timestamptz(6)
  createdAt            DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  onboardingStepLogs   OnboardingStepLog[]

  @@map("onboarding_progress")
}

model OnboardingStepLog {
  id               String   @id @default(cuid())
  onboardingId     String   @map("onboarding_id")
  stepName         String   @map("step_name")
  action           String
  timeSpentSeconds Int      @default(0) @map("time_spent_seconds")
  stepData         Json     @default("{}") @map("step_data") @db.JsonB
  userAgent        String?  @map("user_agent")
  ipAddress        String?  @map("ip_address")
  createdAt        DateTime @default(now()) @map("created_at")

  onboarding OnboardingProgress @relation(fields: [onboardingId], references: [id], onDelete: Cascade)

  @@map("onboarding_step_logs")
}

model Campaign {
  id                String    @id @default(cuid())
  projectId         String    @map("project_id")
  userId            String    @map("user_id")
  name              String
  description       String?
  type              String    @default("email")
  status            String    @default("draft")
  settings          Json      @default("{}") @db.JsonB
  content           Json      @default("{}") @db.JsonB
  totalSubscribers  Int       @default(0) @map("total_subscribers")
  activeSubscribers Int       @default(0) @map("active_subscribers")
  conversionRate    Decimal   @default(0.00) @map("conversion_rate") @db.Decimal(5, 2)
  scheduledAt       DateTime? @map("scheduled_at")
  launchedAt        DateTime? @map("launched_at")
  completedAt       DateTime? @map("completed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers     Subscriber[]
  analyticsEvents AnalyticsEvent[]

  @@map("campaigns")
}

model Subscriber {
  id              String           @id @default(cuid())
  projectId       String           @map("project_id")
  campaignId      String?          @map("campaign_id")
  email           String
  firstName       String?          @map("first_name")
  lastName        String?          @map("last_name")
  phone           String?
  status          String           @default("active")
  tags            String[]         @default([])
  customFields    Json             @default("{}") @map("custom_fields")
  source          String?
  optedInAt       DateTime         @default(now()) @map("opted_in_at") @db.Timestamptz(6)
  unsubscribedAt  DateTime?        @map("unsubscribed_at") @db.Timestamptz(6)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  analyticsEvents AnalyticsEvent[]
  campaign        Campaign?        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("subscribers")
}

model AutomationFlow {
  id              String           @id @default(cuid())
  projectId       String           @map("project_id")
  userId          String           @map("user_id")
  name            String
  description     String?
  triggerType     String           @map("trigger_type")
  triggerConfig   Json             @default("{}") @map("trigger_config")
  actions         Json             @default("{}")
  conditions      Json             @default("{}")
  status          String           @default("draft")
  totalTriggered  Int              @default(0) @map("total_triggered")
  totalCompleted  Int              @default(0) @map("total_completed")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  analyticsEvents AnalyticsEvent[]
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("automation_flows")
}

model EmailTemplate {
  id               String   @id @default(cuid())
  projectId        String   @map("project_id")
  userId           String   @map("user_id")
  name             String
  subject          String
  content          String
  templateType     String   @default("campaign") @map("template_type")
  variables        Json     @default("{}") @db.JsonB
  isSystemTemplate Boolean  @default(false) @map("is_system_template")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_templates")
}

model AnalyticsEvent {
  id           String   @id @default(cuid())
  projectId    String   @map("project_id")
  userId       String?  @map("user_id")
  eventType    String   @map("event_type")
  eventName    String   @map("event_name")
  eventData    Json     @default("{}") @map("event_data")
  subscriberId String?  @map("subscriber_id")
  campaignId   String?  @map("campaign_id")
  automationId String?  @map("automation_id")
  sessionId    String?  @map("session_id")
  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address") @db.Inet
  referrer     String?
  utmSource    String?  @map("utm_source")
  utmMedium    String?  @map("utm_medium")
  utmCampaign  String?  @map("utm_campaign")
  utmTerm      String?  @map("utm_term")
  utmContent   String?  @map("utm_content")
  createdAt    DateTime @default(now()) @map("created_at")

  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriber Subscriber?     @relation(fields: [subscriberId], references: [id], onDelete: SetNull)
  campaign   Campaign?       @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  automation AutomationFlow? @relation(fields: [automationId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  projectId String?   @map("project_id")
  type      String
  title     String
  message   String
  data      Json      @default("{}") @db.JsonB
  isRead    Boolean   @default(false) @map("is_read")
  readAt    DateTime? @map("read_at")
  priority  String    @default("medium")
  channel   String    @default("in_app")
  createdAt DateTime  @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Integration {
  id           String    @id @default(cuid())
  projectId    String    @map("project_id")
  userId       String    @map("user_id")
  name         String
  type         String
  config       Json      @default("{}") @db.JsonB
  credentials  Json      @default("{}") @db.JsonB
  isActive     Boolean   @default(true) @map("is_active")
  lastSyncAt   DateTime? @map("last_sync_at")
  syncStatus   String    @default("pending") @map("sync_status")
  errorMessage String?   @map("error_message")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// User role in the system
enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  GUEST
}

// Organization member roles
enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}

// Project member roles
enum ProjectRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
  CONTRIBUTOR
}
